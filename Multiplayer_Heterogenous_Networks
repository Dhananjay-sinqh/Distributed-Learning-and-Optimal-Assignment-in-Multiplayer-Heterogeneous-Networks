{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyNfjKNjT40NoKVjL45ZXOLy",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Dhananjay-sinqh/github/blob/master/Multiplayer_Heterogenous_Networks\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import numpy as np\n",
        "from scipy.optimize import linear_sum_assignment\n",
        "class MABAlgorithm(object):\n",
        "    \"\"\" Base class for an algorithm class.\"\"\"\n",
        "    def __init__(self, param):\n",
        "        \"\"\" Base class for an algorithm class.\"\"\"\n",
        "        self.nbPlayer = param[\"nbPlayer\"]\n",
        "        self.nbArm = param[\"nbArm\"]\n",
        "        self.context_set = param[\"context_set\"]\n",
        "        \n",
        "        self.nbAgent = 0 # number of agents in the algorithms, can be centralized, decentralized or partially decentralized\n",
        "        \n",
        "        # an agent is usually corresponding to a player, it has its own \n",
        "        self.agents = []\n",
        "        \n",
        "    # --- Printing\n",
        "    def __str__(self):\n",
        "        return self.__class__.__name__\n",
        "\n",
        "    def __repr__(self):\n",
        "        return \"{}({})\".format(self.__class__.__name__, self.__dir__)\n",
        "\n",
        "    # --- functionalities\n",
        "    def resolve_collision(self, pulls):\n",
        "        (nbPlayer, nbArm) = np.shape(pulls)\n",
        "        assert nbPlayer == self.nbPlayer and nbArm == self.nbArm, \"input does not match the stored environment parameters.\"\n",
        "        assert nbPlayer <= nbArm, \"player number should be larger than or equal to arm number.\"\n",
        "    \n",
        "        collisions = pulls.sum(axis=0)\n",
        "        \n",
        "        assert len(collisions) == nbArm, \"dimension of collisions is incorrect\"\n",
        "        return collisions   \n",
        "        \n",
        "    def learn_policy(self, game_env, context=None, time=None):\n",
        "        \"\"\"\n",
        "        Learn policies based on the given game environments.\n",
        "        A game environment can be in the form of (context, sampel_reward_matrix)\n",
        "        \"\"\"\n",
        "        raise NotImplementedError(\"This method learn_policy(t) has to be implemented in the class inheriting from MABAlgorithm.\") \n",
        "\n",
        "    def reset(self, horizon=None):\n",
        "        \"\"\"\n",
        "        The rest parameters cannot be reset, except self.horizon.\n",
        "        \"\"\"\n",
        "        raise NotImplementedError(\"This method reset() has to be implemented in the class inheriting from MABAlgorithm.\") \n",
        "\n",
        "    def pulls2choices(self, pulls):\n",
        "        \"\"\"\n",
        "        Convert pulls into choices\n",
        "        \"\"\"        \n",
        "        (nbPlayer, nbArm) = np.shape(pulls)\n",
        "        assert nbPlayer == self.nbPlayer and nbArm == self.nbArm, \"input does not match the stored environment parameters.\"\n",
        "        \n",
        "        arm_choices = np.zeros(nbPlayer, dtype=int)\n",
        "        \n",
        "        arm_selected = np.nonzero(pulls) # index of non-zero values\n",
        "        \n",
        "        # for some algorithms there may be a case when a player refuse to choose any arm    \n",
        "        for index in range(len(arm_selected[0])):\n",
        "            playerID = arm_selected[0][index]\n",
        "            arm_choices[playerID] = arm_selected[1][index] # playerID should be 0, 1, 2,..., nbPlayer-1\n",
        "           \n",
        "        return arm_choices\n",
        "    \n",
        "    def observe_distributed_payoff(self, game_env, collisions):\n",
        "        (nbPlayer, nbArm) = np.shape(game_env)\n",
        "        assert nbPlayer == self.nbPlayer and nbArm == self.nbArm, \"input does not match the stored environment parameters.\"\n",
        "        \n",
        "        current_reward = np.zeros(self.nbPlayer)\n",
        "        \n",
        "        for playerID in range(self.nbPlayer):\n",
        "            selected_arm = self.agents[playerID].selected_arm\n",
        "            \n",
        "            # for some algorithms there may be a case when a player refuses to choose any arm    \n",
        "            if selected_arm < 0:\n",
        "                current_reward[playerID] = 0\n",
        "            else:\n",
        "                if collisions[selected_arm] == 1:\n",
        "                    current_reward[playerID] = game_env[playerID][selected_arm]# not collidiing\n",
        "                else:\n",
        "                    current_reward[playerID] = 0# colliding or void\n",
        "    \n",
        "        # returen an array of dimension nbArm\n",
        "        return current_reward        \n"
      ],
      "metadata": {
        "id": "jnkQiWuXxIlY"
      },
      "execution_count": 92,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\"\"\"\n",
        " Algorithm: Explore-Signal-Exploit (ESE)\n",
        "\"\"\"    \n",
        "class ESE(MABAlgorithm):\n",
        "    \"\"\" \n",
        "    ESE implements the algorithm \"Explore-Signal-Exploit (ESE)\" proposed in \n",
        "    \"Multiplayer multiarmed bandits for optimal assignment in heterogeneous networks,\" arXiv preprint arXiv:1901.03868, \n",
        "    also by the group of Sumit J. Darak and Manjesh K. Hanawal [Tibrewal2019].\n",
        "        \n",
        "    The algorithm is featured by a protocol of exchanging the local arm-value estimation among players, through an additional\n",
        "    operation of \"observation\". After acquiring the estimated arm-value matrix, each player employ the Hungarian algrithm to \n",
        "    find the optimal arm to pull.\n",
        "    \n",
        "    Strictly speaking, ESE is not a purely decentralized algorithm since it needs sequentially sending information from one player\n",
        "    to another. It may not achieve the same performance as the rest of algorithm within the same time T, due to the extra signaling phase.\n",
        "    \"\"\"\n",
        "\n",
        "    def __init__(self, param):\n",
        "        self.nbPlayer = param[\"nbPlayer\"]\n",
        "        self.nbArm = param[\"nbArm\"]\n",
        "        self.context_set = param[\"context_set\"] # not used\n",
        "        \n",
        "        self.delta_R = 0.1 if 'delta_R' not in param.keys() else param['delta_R'] # allowable prob. of non-orthogonal allocation\n",
        "        self.epsilon = 0.1\n",
        "        self.time = 0\n",
        "        \n",
        "        # epoch parameters (well the reference paper does not provide a clear way of determining Ts and Tb, see their Alg. 2)\n",
        "        # we use a simplified appraoch\n",
        "        self.Tr = np.ceil(np.log(self.delta_R / self.nbArm) / (np.log(1-1/(4*self.nbArm))))  #rounds for random hopping (Tr), given by the configuration\n",
        "\n",
        "        self.Ts = np.ceil(8.*self.nbPlayer**2/(self.epsilon**2))\n",
        "        self.Tb = np.ceil(np.log2(4.*self.nbPlayer/self.epsilon))\n",
        "        \n",
        "        self.current_epoch = 1\n",
        "        self.round_to_last_epoch = self.Tr + self.nbArm\n",
        "\n",
        "        self.agents = []        \n",
        "        for playerID in range(self.nbPlayer):\n",
        "            player_param = {\"context_set\": self.context_set, \n",
        "                            \"nbArm\": self.nbArm,\n",
        "                            \"nbPlayer\": self.nbPlayer,\n",
        "                            \"playerID\": playerID\n",
        "                            }\n",
        "            \n",
        "            self.agents.append(ESEPlayer(player_param))\n",
        "\n",
        "        info_logger().log_info('ESE random hopping phase length {}'.format(self.Tr + self.nbArm)) #debug\n",
        "        info_logger().log_info('ESE sequential hopping phase length Ts {}'.format(self.Ts)) #debug\n",
        "        info_logger().log_info('ESE signaling length Tb {}'.format(self.Tb)) #debug\n",
        "        \n",
        "        epoch_length = self.nbArm * self.Ts + self.nbPlayer * self.nbArm * self.Tb + int(np.exp(self.current_epoch))\n",
        "        info_logger().log_info('ESE play epoch length {}'.format(epoch_length)) #debug\n",
        "\n",
        "    # --- Printing\n",
        "    def __str__(self):\n",
        "        return \"Explore Signal Exploitn\"\n",
        "\n",
        "    # --- functionalities\n",
        "    def reset(self, horizon=None):\n",
        "        self.time = 0\n",
        "        self.current_epoch = 1\n",
        "        self.round_to_last_epoch = self.Tr + self.nbArm\n",
        "        \n",
        "        for agent in self.agents:\n",
        "            agent.reset()\n",
        "        \n",
        "    def learn_policy(self, game_env, context=None, time=None):\n",
        "        # context is not used in ESE\n",
        "        (nbPlayer, nbArm) = np.shape(game_env)\n",
        "        assert nbPlayer == self.nbPlayer and nbArm == self.nbArm, \"input does not match the stored environment parameters.\"\n",
        "        assert nbPlayer <= nbArm, \"player number should be larger than or equal to arm number.\"\n",
        "                        \n",
        "        self.time = self.time + 1\n",
        "        \n",
        "        pulls = np.zeros((nbPlayer, nbArm))       \n",
        "        \n",
        "        # there is a single random hopping phases in the game, arm-value is not learned in this phase\n",
        "        if self.time <= self.Tr:\n",
        "            for agentID in range(nbPlayer):\n",
        "                armID = self.agents[agentID].random_hop(None, time)\n",
        "                pulls[agentID][armID] = 1  \n",
        "            \n",
        "            collisions = self.resolve_collision(pulls)\n",
        "        \n",
        "        elif self.time <= self.Tr + self.nbArm:\n",
        "            # this phase is to simulate the process for players to estimate the number of players\n",
        "            for agentID in range(nbPlayer):\n",
        "                pulls[agentID][self.agents[agentID].current_arm] = 1 \n",
        "                \n",
        "            collisions = self.resolve_collision(pulls)\n",
        "            \n",
        "        elif self.time - self.round_to_last_epoch <= self.nbArm * self.Ts:\n",
        "            #exploration with sequential hopping\n",
        "            for agentID in range(nbPlayer):\n",
        "                armID = self.agents[agentID].sequential_hop(None, time)\n",
        "                pulls[agentID][armID] = 1\n",
        "                   \n",
        "            collisions = self.resolve_collision(pulls)\n",
        "            for agentID in range(nbPlayer):\n",
        "                self.agents[agentID].learn_arm_value(None, game_env[agentID,:], collisions)                                \n",
        "             \n",
        "        elif self.time - self.round_to_last_epoch - self.nbArm * self.Ts <= self.nbPlayer * self.nbArm * self.Tb:\n",
        "            # signaling phase\n",
        "            # we don't need to simulate the complete signaling process, but we need to truncate the prevision of each player's estimated arm-values \n",
        "            \n",
        "            # the original phase of signaling, according to [Tibrewal2019], does not contributes to the accumulated sum (experience) of arm evaluation,\n",
        "            # since for most of the time one player needs to either \"observe\" a certain arm without playing one, or stop to play to \"broadcast\" bit \"0\" to the other players.\n",
        "            # However, this incurs HUGE amount of regret since the signaling phase is too long to neglect. \n",
        "            # This may be a flaw of the original design of the ESE algorithm. \n",
        "            # In our implementation we assume that the players are still able to get a reward during signaling phase. \n",
        "            \n",
        "            if self.time - self.round_to_last_epoch - self.nbArm * self.Ts == 1:\n",
        "                arm_matrix = np.zeros((self.nbPlayer, self.nbArm))\n",
        "                for agentID in range(nbPlayer):\n",
        "                    arm_matrix[agentID, :] = self.agents[agentID].arm_score\n",
        "                            \n",
        "                truncated_arm_matrix = numfi(arm_matrix, bits_frac=int(np.log2(4*self.nbPlayer/self.epsilon)))\n",
        "                        \n",
        "                for agentID in range(nbPlayer):\n",
        "                    self.agents[agentID].estimated_arm_matrix = truncated_arm_matrix\n",
        "                    self.agents[agentID].estimated_arm_matrix[agentID, :] = self.agents[agentID].arm_score\n",
        "                            \n",
        "                    # each player performs local Hungarian algorithm to derive its \"optimal\" policy\n",
        "                    # the mehtod requires the number of rows (jobs) to be larger than that of columns (workers)\n",
        "                    cost_matrix = np.negative(self.agents[agentID].estimated_arm_matrix.transpose())\n",
        "                    # note that the cost_matrix is a transpose of the original matrix\n",
        "                    col_ind, row_ind = linear_sum_assignment(cost_matrix) \n",
        "                            \n",
        "                    # set player's policy\n",
        "                    for ii in range(len(row_ind)):\n",
        "                        playerID = row_ind[ii]\n",
        "                        if playerID == agentID:\n",
        "                            self.agents[agentID].policy = col_ind[ii]\n",
        "                            pulls[agentID][col_ind[ii]] = 1\n",
        "            \n",
        "            for agentID in range(self.nbPlayer):\n",
        "                armID = self.agents[agentID].policy\n",
        "                pulls[agentID][armID] = 1  \n",
        "            \n",
        "            collisions = self.resolve_collision(pulls)  \n",
        "            \n",
        "        elif self.time - self.round_to_last_epoch - self.nbArm * self.Ts - self.nbPlayer * self.nbArm * self.Tb <= int(np.exp(self.current_epoch)):\n",
        "            # exploitation phase\n",
        "            for agentID in range(nbPlayer):\n",
        "                armID = self.agents[agentID].exploit(context, self.time)\n",
        "                pulls[agentID][armID] = 1  \n",
        "                \n",
        "            collisions = self.resolve_collision(pulls)              \n",
        "                              \n",
        "            if self.time == self.round_to_last_epoch + self.nbArm * self.Ts + self.nbPlayer * self.nbArm * self.Tb + int(np.exp(self.current_epoch)):\n",
        "                #update round number\n",
        "                self.round_to_last_epoch += self.nbArm * self.Ts + self.nbPlayer * self.nbArm * self.Tb + int(np.exp(self.current_epoch))\n",
        "                self.current_epoch = self.current_epoch + 1\n",
        "                    \n",
        "                info_logger().log_info('ESE play epoch {}'.format(self.current_epoch)) #debug\n",
        "            \n",
        "        current_rewards = self.observe_distributed_payoff(game_env, collisions)                        \n",
        "        total_rewards = np.sum(current_rewards)        \n",
        "        return pulls, total_rewards, current_rewards"
      ],
      "metadata": {
        "id": "OF4hOJz5xJMJ"
      },
      "execution_count": 93,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class Player(object):\n",
        "    \"\"\" Base class for a player class.\"\"\"\n",
        "\n",
        "    def __init__(self, param):\n",
        "        \"\"\" \n",
        "        Base class for a player class.\n",
        "        For clarity, we require each child class to re-implement completely the __init__() method.\n",
        "        \"\"\"\n",
        "        self.horizon = param[\"horizon\"]  #: if the horizon is not known in advance, set it to None.\n",
        "        self.nbArm = param[\"nbArm\"]\n",
        "                \n",
        "        #for arm of a specific context-player\n",
        "        self.context = param[\"context\"]\n",
        "        self.playerID = param[\"playerID\"]\n",
        "        \n",
        "        self.arm_estimate = np.zeros(self.nbArm)\n",
        "    \n",
        "    # --- Printing\n",
        "    def __str__(self):\n",
        "        return self.__class__.__name__    \n",
        "        \n",
        "    # --- functionalities\n",
        "    def explore(self, context = None, time = None):\n",
        "        print(\"decision() should be implemented for agent adopting a particular algorithm.\")\n",
        "        \n",
        "    \n",
        "    def learn_arm_value(self, context = None, arm_values = None, collisions = None):\n",
        "        print(\"learn_arm_value() should be implemented for agent adopting a particular algorithm.\")\n",
        "        \n",
        "    def exploit(self, context = None, time=None):\n",
        "        print(\"exploit() should be implemented for agent adopting a particular algorithm.\")\n",
        "        \n",
        "    def reset(self):\n",
        "        print(\"reset() should be implemented for agent adopting a particular algorithm.\")"
      ],
      "metadata": {
        "id": "uIlyRsx9yNF9"
      },
      "execution_count": 94,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class ESEPlayer(Player):\n",
        "    \"\"\" \n",
        "    ESEPlayer is the player for the algorithm \"Explore-Signal-Exploit (ESE)\" proposed in\n",
        "    \"Multiplayer multiarmed bandits for optimal assignment in heterogeneous networks,\" arXiv preprint arXiv:1901.03868, \n",
        "    by Sumit J. Darak and Manjesh K. Hanawal [Tibrewal2019].\n",
        "        \n",
        "    The algorithm is featured by a protocol using player's state to carry the data load for signaling\n",
        "    \"\"\"\n",
        "    def __init__(self, param):\n",
        "        self.nbArm = param[\"nbArm\"]\n",
        "        self.nbPlayer = param[\"nbPlayer\"]\n",
        "        \n",
        "#        info_logger().log_info('ESE player number {}'.format(self.nbPlayer)) #debug\n",
        "                    \n",
        "        #for arm of a specific context-player\n",
        "        self.playerID = param[\"playerID\"]\n",
        "        \n",
        "        self.flag_lock = False\n",
        "    \n",
        "        self.selected_arm = 0 # index of the locked arm\n",
        "        self.policy = -1 # set to an invalid value\n",
        "        self.current_arm = 0\n",
        "        self.arm_score = np.zeros(self.nbArm)\n",
        "        self.estimated_arm_matrix = np.zeros((self.nbPlayer, self.nbArm))\n",
        "        \n",
        "        self.accumulated_value = np.zeros(self.nbArm)\n",
        "        self.nb_observation = np.zeros(self.nbArm) # number of observed non-zero payoff\n",
        "        \n",
        "    def reset(self):\n",
        "        self.flag_lock = False\n",
        "    \n",
        "        self.selected_arm = 0\n",
        "        self.policy = -1 # set to an invalid value\n",
        "        self.current_arm = 0\n",
        "        \n",
        "        self.arm_score = np.zeros(self.nbArm) \n",
        "        self.estimated_arm_matrix = np.zeros((self.nbPlayer, self.nbArm))\n",
        "        \n",
        "        self.accumulated_value = np.zeros(self.nbArm)\n",
        "        self.nb_observation = np.zeros(self.nbArm) # number of observed non-zero payoff\n",
        "\n",
        "        \n",
        "     # --- functionalities\n",
        "    def random_hop(self, context = None, time = None):\n",
        "        \"\"\"\n",
        "        random_hop() is equivalent to the algorithm \"Random Hopping\" in [Tibrewal2019], \n",
        "        it allows users to orthogonalize on channels through uniformly drawing action samples at random  \n",
        "        \n",
        "        flag_lock has to be set after observing the collision feedback\n",
        "        \"\"\"\n",
        "        if self.flag_lock == True:\n",
        "            # choose the same action, do nothing\n",
        "            if self.policy == -1:\n",
        "                self.policy = self.selected_arm            \n",
        "        else:\n",
        "            self.selected_arm = np.random.randint(self.nbArm)\n",
        "            \n",
        "        self.current_arm = self.selected_arm \n",
        "            \n",
        "        return self.selected_arm    \n",
        "    \n",
        "    def sequential_hop(self, context = None, time = None):\n",
        "        self.current_arm = (self.current_arm + 1) % self.nbArm\n",
        "        \n",
        "        return self.current_arm\n",
        "    \n",
        "    def learn_arm_value(self, context = None, arm_values = None, collisions = None):\n",
        "        # estimated arm score\n",
        "        armID = self.current_arm\n",
        "            \n",
        "        self.nb_observation[armID] = self.nb_observation[armID] + 1                \n",
        "        self.accumulated_value[armID] = self.accumulated_value[armID] + arm_values[armID]\n",
        "            \n",
        "        # update UCB Scores\n",
        "        self.arm_score = self.accumulated_value / (self.nb_observation+1e-9)\n",
        "        \n",
        "    def exploit(self, context = None, time=None):       \n",
        "#        self.selected_arm = self.get_best_policy(context) # if turning this on, we'll compute the best policy each time\n",
        "        \n",
        "        self.current_arm = self.policy\n",
        "        return self.current_arm #return the action"
      ],
      "metadata": {
        "id": "juQzEjVrxwq4"
      },
      "execution_count": 95,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "from datetime import datetime\n",
        "\n",
        "import matplotlib as mpl\n",
        "#from matplotlib.ticker import FuncFormatter \n",
        "\n",
        "import os, errno\n",
        "\n",
        "import matplotlib.pyplot as plt\n",
        "import matplotlib.ticker as mticker\n",
        "\n",
        "#import numpy as np\n",
        "import seaborn as sns\n",
        "import pandas as pd\n",
        "\n",
        "import numpy as np\n",
        "\n",
        "#from pickle import dump as pickle_dump # alternative choice of dumping files\n",
        "\n",
        "DPI = 120  #: DPI to use for the figures\n",
        "FIGSIZE = (4,3) #: Figure size, in inches\n",
        "#FIGSIZE = (5,4) #: Figure size, in inches\n",
        "\n",
        "# Customize the colormap\n",
        "HLS = True  #: Use the HLS mapping, or HUSL mapping\n",
        "VIRIDIS = False  #: Use the Viridis colormap\n",
        "\n",
        "# Bbox in inches. Only the given portion of the figure is saved. If 'tight', try to figure out the tight bbox of the figure.\n",
        "BBOX_INCHES = \"tight\"  #: Use this parameter for bbox\n",
        "BBOX_INCHES = None\n",
        "\n",
        "if __name__ != '__main__':\n",
        "    # use a clever color palette, eg http://seaborn.pydata.org/api.html#color-palettes\n",
        "    sns.set(context=\"talk\", style=\"whitegrid\", palette=\"hls\", font=\"sans-serif\", font_scale=0.95)\n",
        "\n",
        "    # Use tex by default http://matplotlib.org/2.0.0/users/dflt_style_changes.html#math-text\n",
        "    # mpl.rcParams['text.usetex'] = True  # XXX force use of LaTeX\n",
        "    mpl.rcParams['font.family'] = \"sans-serif\"\n",
        "    mpl.rcParams['font.sans-serif'] = \"DejaVu Sans\"\n",
        "    mpl.rcParams['mathtext.fontset'] = \"cm\"\n",
        "    mpl.rcParams['mathtext.rm'] = \"serif\"\n",
        "\n",
        "    # Configure size for axes and x and y labels\n",
        "    # Cf. https://stackoverflow.com/a/12444777/\n",
        "    mpl.rcParams['axes.labelsize']  = \"x-small\"\n",
        "    mpl.rcParams['xtick.labelsize'] = \"x-small\"\n",
        "    mpl.rcParams['ytick.labelsize'] = \"x-small\"\n",
        "    mpl.rcParams['figure.titlesize'] = \"x-small\"\n",
        "\n",
        "    # Configure the DPI of all images, once for all!\n",
        "    mpl.rcParams['figure.dpi'] = DPI\n",
        "    # print(\" - Setting dpi of all figures to\", DPI, \"...\")  # DEBUG\n",
        "\n",
        "    # Configure figure size, even of if saved directly and not displayed, use HD screen\n",
        "    # cf. https://en.wikipedia.org/wiki/Computer_display_standard\n",
        "    mpl.rcParams['figure.figsize'] = FIGSIZE\n",
        "    # print(\" - Setting 'figsize' of all figures to\", FIGSIZE, \"...\")  # DEBUG\n",
        "\n",
        "def prepare_file_name(file_name = None, alg_name = None, ext_format = None, add_timestamp=True):    \n",
        "    now = datetime.now()\n",
        "    current_date = now.strftime(\"%Y-%m-%d-%H-%M-%S\")\n",
        "    \n",
        "    cwd = os.getcwd() # current directory\n",
        "    target_directory = \"{}\\{}\".format(cwd, \"results\")\n",
        "    \n",
        "    if not os.path.exists(target_directory):\n",
        "        try:\n",
        "            os.makedirs(target_directory)\n",
        "        except OSError as e:\n",
        "            if e.errno != errno.EEXIST:\n",
        "                raise\n",
        "\n",
        "    file_name_no_ext = \"\"    \n",
        "    file_path = \"\" \n",
        "    if alg_name is None and add_timestamp == False:   \n",
        "        file_name_no_ext = \"{}\".format(file_name if file_name is not None else \"-\")    \n",
        "        \n",
        "        file_path = \"{}\\{}.{}\".format(target_directory, file_name_no_ext,\n",
        "                     ext_format if ext_format is not None else \"\")\n",
        "    else:\n",
        "        file_name_no_ext = \"{}-{}-{}\".format(file_name if file_name is not None else \"\", \n",
        "                 alg_name if alg_name is not None else \"\", \n",
        "                 current_date if add_timestamp else \"\")  \n",
        "        \n",
        "        file_path = \"{}\\{}.{}\".format(target_directory, file_name_no_ext,\n",
        "                     ext_format if ext_format is not None else \"\")  \n",
        "        \n",
        "    \n",
        "    return file_path, file_name_no_ext\n",
        "\n",
        "def read_data_frame(file_name, ext_format='pkl'):\n",
        "    \"\"\" \n",
        "    Read a DataFrame from the default path with file name identified as 'file_name'\n",
        "    \"\"\"\n",
        "    file_path, file_name = prepare_file_name(file_name=file_name, ext_format=ext_format, add_timestamp=False)\n",
        "    df = pd.read_pickle(file_path) \n",
        "    \n",
        "    return df\n",
        "\n",
        "def make_palette(nbColors, hls=HLS, viridis=False):\n",
        "    \"\"\" \n",
        "    Use the seaborn palette to create nbColors different curves on the same figure.\n",
        "    See also http://seaborn.pydata.org/generated/seaborn.hls_palette.html#seaborn.hls_palette\n",
        "    \"\"\"\n",
        "    if viridis:\n",
        "        return sns.color_palette('viridis', nbColors)\n",
        "    else:\n",
        "        return sns.hls_palette(nbColors + 1)[:nbColors] if hls else sns.husl_palette(nbColors + 1)[:nbColors]\n",
        "\n",
        "\n",
        "def make_markers(nbMarkers):\n",
        "    \"\"\" \n",
        "    Give a list of cycling markers. See also https://matplotlib.org/3.1.1/api/markers_api.html\n",
        "    List of markers in SMPyBandits (as an example):\n",
        "        allmarkers = ['o', 'D', 'v', 'p', '<', 's', '^', '*', 'h', '>']\n",
        "    \"\"\"\n",
        "    allmarkers = ['o', 'D', 'v', 'X', 'P', '^', 'p', '<', 's', '^', '*', 'h', '>']\n",
        "    marker_list = allmarkers * (1 + int(nbMarkers / float(len(allmarkers))))  # Cycle the good number of time\n",
        "    return marker_list[:nbMarkers]  # Truncate\n",
        "\n",
        "\n",
        "#: Shrink factor if the legend is displayed on the right of the plot.\n",
        "SHRINKFACTOR = 0.60\n",
        "\n",
        "#: Default parameter for maximum number of label to display in the legend INSIDE the figure\n",
        "MAXNBOFLABELINFIGURE = 8\n",
        "\n",
        "def display_legend(putatright=False, fontsize=\"xx-small\", shrinkfactor=SHRINKFACTOR, \n",
        "           maxnboflabelinfigure=MAXNBOFLABELINFIGURE, fig=None, title=None):\n",
        "    \"\"\"plt.legend() with good options, cf. http://matplotlib.org/users/recipes.html#transparent-fancy-legends.\n",
        "    - For the purpose of generating figures for papers, it is not recommended to place it at the right-side.\n",
        "    \"\"\"\n",
        "    try:\n",
        "        len_leg = len(plt.gca().get_legend_handles_labels()[1])\n",
        "        putatright = len_leg > maxnboflabelinfigure\n",
        "        if len_leg > maxnboflabelinfigure: \n",
        "            print(\"Warning: forcing to use putatright = {} because there is {} items in the legend.\".format(putatright, len_leg))  # DEBUG\n",
        "    except (ValueError, AttributeError, IndexError) as e:\n",
        "        print(\"error =\", e)  # DEBUG\n",
        "    \n",
        "    if fig is None:\n",
        "        fig = plt\n",
        "    if putatright:\n",
        "        try:\n",
        "            # Shrink current axis by 20% on xaxis and 10% on yaxis\n",
        "            delta_rect = (1. - shrinkfactor)/6.25\n",
        "            fig.tight_layout(rect=[delta_rect, delta_rect, shrinkfactor, 1 - 2*delta_rect])\n",
        "            # Put a legend to the right of the current axis\n",
        "            fig.legend(loc='center left', numpoints=1, fancybox=True, framealpha=0.8, bbox_to_anchor=(1, 0.5), title=title, fontsize=fontsize)\n",
        "        except:\n",
        "            fig.legend(loc='best', numpoints=1, fancybox=True, framealpha=0.8, title=title, fontsize=fontsize)\n",
        "    else:\n",
        "        fig.legend(loc='best', numpoints=1, fancybox=True, framealpha=0.8, title=title, fontsize=fontsize)\n",
        "        \n",
        "\n",
        "def plot_data_frame(input_dframe, xlabel, ylabel, huelabel, stylelabel=None, height=5, aspect=1.25, flag_semilogx=False,\n",
        "                    save_file_name=None, sav_file_ext=None, save_data_name=None):\n",
        "    \"\"\"\n",
        "    plot_data_frame() takes 'input_dframe' as the payload data. \\\n",
        "    It also tries to plot the repeated simulation results with the labels of x, y axis and \n",
        "    the huelabel identified by the keys of 'input_dframe' as 'xlabel', 'ylabel' and 'huelabel'.\n",
        "    \"\"\"\n",
        "    \n",
        "#    sns.set(font_scale=1.0)\n",
        "    sns_figure = sns.relplot(x=xlabel, y=ylabel, hue = huelabel, style=stylelabel,\n",
        "                kind=\"line\", data=input_dframe, height=height, aspect=aspect);\n",
        "    \n",
        "    if flag_semilogx == True:\n",
        "        sns_figure.ax.set(xscale=\"log\")         \n",
        "        \n",
        "    # force scientific notations on x-axis\n",
        "    formatter = mticker.ScalarFormatter(useOffset=False, useMathText=True)\n",
        "    formatter_func = lambda x,pos : \"${}$\".format(formatter._formatSciNotation('%1.10e' % x))\n",
        "    \n",
        "    sns_figure.ax.get_xaxis().set_major_formatter(mticker.FuncFormatter(formatter_func))\n",
        "    sns_figure.ax.get_yaxis().set_major_formatter(mticker.FuncFormatter(formatter_func))\n",
        "                 \n",
        "    if save_file_name is not None:\n",
        "        sav_file_ext = sav_file_ext if sav_file_ext is not None else 'pdf'        \n",
        "        figure_file_path, figure_file_name = prepare_file_name(file_name=save_file_name, ext_format=sav_file_ext)\n",
        "        sns_figure.savefig(figure_file_path)\n",
        "        \n",
        "    data_file_name = None\n",
        "    if save_data_name is not None:\n",
        "        data_file_path, data_file_name = prepare_file_name(file_name=save_data_name, ext_format='pkl', add_timestamp=True)\n",
        "        input_dframe.to_pickle(data_file_path)        \n",
        "           \n",
        "    return sns_figure, data_file_name\n",
        "\n",
        "\n",
        "\"\"\"\n",
        "Specifically used for plotting regret data, with theoretical bound\n",
        "\"\"\"\n",
        "def plot_repeated_simu_results(start, horzion, nbPoints, \n",
        "                        nbArm=2, c1=100, c2=20, flag_bound = False,\n",
        "                        key_x='Total number of plays', key_y='Average regret', key_alg='Algorithms',\n",
        "                        data_file_name='regret_data', save_fig_name=\"monte_carlo_regret\"):\n",
        "    #plot key_x, key_y with huelable as key_alg\n",
        "    repeated_play_data = read_data_frame(data_file_name)   \n",
        "    \n",
        "    if flag_bound:\n",
        "        T = np.linspace(start=4*start, stop = horzion, num=nbPoints)\n",
        "        \n",
        "        # This formula is heuristic, and for different parameter sets (context-arm numbers)\n",
        "        # we need to obtain the proper parameters of a tight bound with manually testing.\n",
        "        X = (c2*nbArm*(np.log2(T+2)**2) + c1*nbArm*np.log2(T+2))/T \n",
        "        Label = ['$O(M\\log_2^{\\delta}(T))$']*len(T)\n",
        "        \n",
        "        Dash = [1]*len(T)\n",
        "        \n",
        "        T = np.append(repeated_play_data[key_x], T)\n",
        "        X = np.append((repeated_play_data[key_y]), X)\n",
        "        Label = np.append((repeated_play_data[key_alg]), Label)\n",
        "        Dash = np.append([0]*len(repeated_play_data[key_alg]), Dash)\n",
        "    \n",
        "        recorded_data = {}            \n",
        "        recorded_data[key_x] = T        \n",
        "        recorded_data[key_y] = X    \n",
        "        recorded_data[key_alg] = Label\n",
        "        recorded_data['Dash'] = Label\n",
        "        \n",
        "        final_data = pd.DataFrame(recorded_data)    \n",
        "        \n",
        "        g, data_file_name = plot_data_frame(final_data, xlabel=key_x, ylabel=key_y, huelabel=key_alg)\n",
        "        \n",
        "        nbLines = len(set(final_data[key_alg]))\n",
        "        print(nbLines)\n",
        "        \n",
        "#        # force scientific notations on x-axis\n",
        "#        g.ax.get_xaxis().get_major_formatter().set_scientific(True)\n",
        "        g.ax.lines[nbLines-1].set_linestyle(\"--\")\n",
        "        g.ax.lines[nbLines-1].set_color(\"grey\")\n",
        "        \n",
        "        le = g.ax.legend()\n",
        "        le.get_lines()[nbLines].set_color('grey')\n",
        "        le.get_lines()[nbLines].set_linestyle(\"--\")\n",
        "        le.get_frame().set_facecolor('none')    \n",
        "        le.get_frame().set_edgecolor('none')    \n",
        "    else:\n",
        "        final_data = repeated_play_data    \n",
        "        g, data_file_name = plot_data_frame(final_data, xlabel=key_x, ylabel=key_y, huelabel=key_alg)\n",
        "#        # force scientific notations on x-axi\n",
        "#        g.ax.get_xaxis().get_major_formatter().set_scientific(True)\n",
        "        \n",
        "    # force scientific notations on x-axis\n",
        "    formatter = mticker.ScalarFormatter(useOffset=False, useMathText=True)\n",
        "    formatter_func = lambda x,pos : \"${}$\".format(formatter._formatSciNotation('%1.10e' % x))\n",
        "    \n",
        "    g.ax.get_xaxis().set_major_formatter(mticker.FuncFormatter(formatter_func))\n",
        "    g.ax.get_yaxis().set_major_formatter(mticker.FuncFormatter(formatter_func))   \n",
        "          \n",
        "    file_path, file_name = prepare_file_name(file_name=save_fig_name, ext_format='pdf', add_timestamp=False)\n",
        "    g.savefig(file_path)  "
      ],
      "metadata": {
        "id": "VzJ3xRgHEsM7"
      },
      "execution_count": 96,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "import scipy.io\n",
        "    \n",
        "DELTA_T_PLOT = 50\n",
        "FIGURE_SIZE = (5, 3.75)\n",
        "\n",
        "# from plot_utils import make_markers, make_palette, display_legend, prepare_file_name\n",
        "from datetime import datetime\n",
        "\n",
        "class ResultMultiPlayers(object):\n",
        "    \"\"\" ResultMultiPlayers accumulators, for the multi-players case. \"\"\"\n",
        "    \n",
        "    def __init__(self, alg_name, context_set, player_no, arm_no, horizon):\n",
        "        \"\"\" Create ResultMultiPlayers.\"\"\"\n",
        "        self.alg_name = alg_name\n",
        "        \n",
        "        self.nbPlayer = player_no\n",
        "        self.nbArm = arm_no\n",
        "        self.context_set = context_set\n",
        "        self.horizon = horizon\n",
        "        \n",
        "        self.choices = np.zeros((player_no, horizon), dtype=int)  #: Store all the arm choices of all the players\n",
        "        self.sampled_rewards = np.zeros((player_no, horizon))  #: Store all the rewards of all the players, to compute the mean\n",
        "        self.total_rewards = np.zeros(horizon) \n",
        "        \n",
        "        self.context_history = [None]*horizon\n",
        "        \n",
        "        self.pull_history = np.zeros((player_no, arm_no, horizon), dtype=int)  #: Is a map of 0-1 for players and arms\n",
        "        self.collisions = np.zeros((arm_no, horizon), dtype=int)  #: Store the number of collisions on all the arms\n",
        "        \n",
        "        self.delta_t_plot = 1 if self.horizon <= 10000 else DELTA_T_PLOT\n",
        "\n",
        "    def store(self, time, context, choices, sampled_rewards, total_rewards, pulls, collision=None):\n",
        "        \"\"\" Store results.\"\"\"\n",
        "        self.context_history[time] = context\n",
        "        \n",
        "        self.choices[:, time] = choices\n",
        "        self.sampled_rewards[:, time] = sampled_rewards\n",
        "        self.total_rewards[time] = total_rewards\n",
        "\n",
        "        self.pull_history[:, :, time] = pulls\n",
        "        \n",
        "        if collision is None:\n",
        "            self.collisions[:, time] = 0\n",
        "        else:\n",
        "            self.collisions[:, time] = collision\n",
        "            \n",
        "    def reset_record(self, horizon=None):\n",
        "        if horizon is not None:\n",
        "            self.horizon = horizon\n",
        "        \n",
        "        self.choices = np.zeros((self.nbPlayer, self.horizon), dtype=int)  #: Store all the arm choices of all the players\n",
        "        self.sampled_rewards = np.zeros((self.nbPlayer, self.horizon))  #: Store all the rewards of all the players, to compute the mean\n",
        "        self.total_rewards = np.zeros(self.horizon) \n",
        "        \n",
        "        self.context_history = [None]*self.horizon\n",
        "        \n",
        "        self.pull_history = np.zeros((self.nbPlayer, self.nbArm, self.horizon), dtype=int)  #: Is a map of 0-1 for players and arms\n",
        "        self.collisions = np.zeros((self.nbArm, self.horizon), dtype=int)  #: Store the number of collisions on all the arms\n",
        "        \n",
        "        \n",
        "    def dump2disk(self, file_name=None):\n",
        "        \"\"\"Save the result into a Matlab .mat file\"\"\"       \n",
        "        file_path = prepare_file_name(file_name, self.alg_name, \"mat\")\n",
        "        \n",
        "        scipy.io.savemat(file_path, mdict={\"nbPlayer\": self.nbPlayer, \"nbArm\": self.nbArm, \"context_set\": list(self.context_set),\n",
        "                                           \"horizon\": self.horizon, \"context_history\": self.context_history, \n",
        "                                           \"sampled_reward\": self.sampled_rewards,\n",
        "                                           \"choices\": self.choices, \"collisions\": self.collisions})\n",
        "        \n",
        "        \n",
        "    \"\"\"\n",
        "    The following methods are used for plotting/saving figures.  \n",
        "    Other figure plotting methods can be found in plotutils.py\n",
        "    \"\"\"\n",
        "    def plot_cumu_rewards(self, horizon=None, other_results=None, semilogx=False, save_fig=False, save_data=False):\n",
        "        #other_results are used for comparison with other algorithms\n",
        "        if other_results is not None:\n",
        "            #the other results should have the same player/arm numbers\n",
        "            for idx in range(len(other_results)):\n",
        "                nbPlayer = other_results[idx].nbPlayer\n",
        "                nbArm = other_results[idx].nbArm\n",
        "                \n",
        "                if nbPlayer != self.nbPlayer or nbArm != self.nbArm:\n",
        "                    raise Exception(\"environment does not match!\")\n",
        "                    \n",
        "            nbCurves = self.nbPlayer * (1 + len(other_results))\n",
        "        else:\n",
        "            nbCurves = self.nbPlayer\n",
        "            \n",
        "        \"\"\"Plot the decentralized rewards, for each player.\"\"\"\n",
        "        fig = plt.figure(figsize=FIGURE_SIZE)\n",
        "        ymin = 0\n",
        "        colors = make_palette(nbCurves)\n",
        "        markers = make_markers(nbCurves)\n",
        "        \n",
        "        if horizon is None:\n",
        "            horizon = self.horizon\n",
        "        \n",
        "        X = np.arange(start=0, stop=horizon, step=1)\n",
        "        \n",
        "        #plot the locally stored values\n",
        "        cumu_rewards = np.cumsum(self.sampled_rewards, axis=1)\n",
        "\n",
        "        curve_idx = 0\n",
        "        for playerId in range(self.nbPlayer):            \n",
        "            label = '{}: Player {:>2}'.format(self.alg_name, playerId + 1)\n",
        "            Y = cumu_rewards[playerId, :horizon]\n",
        "            Y = Y / (X+1)\n",
        "\n",
        "            ymin = min(ymin, np.min(Y))\n",
        "            if semilogx:\n",
        "                plt.semilogx(X[::self.delta_t_plot], Y[::self.delta_t_plot], label=label, color=colors[curve_idx], \n",
        "                             marker=markers[curve_idx], markersize=5, markevery=(curve_idx / 50., 0.1), lw=1)\n",
        "            else:\n",
        "                plt.plot(X[::self.delta_t_plot], Y[::self.delta_t_plot], label=label, color=colors[curve_idx], \n",
        "                         marker=markers[curve_idx], markersize=5, markevery=(curve_idx / 50., 0.1), lw=1)\n",
        "                \n",
        "            curve_idx = curve_idx + 1\n",
        "            \n",
        "        if other_results is not None:\n",
        "             for idx in range(len(other_results)):\n",
        "                 cumu_rewards = np.cumsum(other_results[idx].sampled_rewards, axis=1)\n",
        "                 for playerId in range(other_results[idx].nbPlayer):\n",
        "                     label = '{}: Player {:>2}'.format(other_results[idx].alg_name, playerId + 1)\n",
        "                     Y = cumu_rewards[playerId, :horizon]\n",
        "                     Y = Y / (X+1)\n",
        "                     ymin = min(ymin, np.min(Y))\n",
        "                     if semilogx:\n",
        "                         plt.semilogx(X[::self.delta_t_plot], Y[::self.delta_t_plot], label=label, color=colors[curve_idx], \n",
        "                                  marker=markers[curve_idx], markersize=5, markevery=(curve_idx / 50., 0.1), lw=1)\n",
        "                     else:\n",
        "                         plt.plot(X[::self.delta_t_plot], Y[::self.delta_t_plot], label=label, color=colors[curve_idx], \n",
        "                                  marker=markers[curve_idx], markersize=5, markevery=(curve_idx / 50., 0.1), lw=1)\n",
        "                     \n",
        "                     curve_idx = curve_idx + 1\n",
        "                \n",
        "        display_legend()\n",
        "        plt.xlabel(\"Number of rounds\", fontsize=10)\n",
        "        plt.ylabel(\"Average reward over time\", fontsize=10)\n"
      ],
      "metadata": {
        "id": "Qh552efj7x0r"
      },
      "execution_count": 97,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class AlgEvaluator:\n",
        "    def __init__(self, configuration):        \n",
        "        self.horizon = configuration['horizon']\n",
        "        \n",
        "        self.nbArms = configuration['arm number']        \n",
        "        self.nbPlayers = configuration['player number']\n",
        "        \n",
        "        self.context_set = configuration['context set']\n",
        "        self.nbContext = len(self.context_set)\n",
        "        \n",
        "        # for loaded values or when calling the prepare() methods, set true\n",
        "        self.flag_pre_prepare = False        \n",
        "        self.flag_simulation_done = False\n",
        "                \n",
        "        # we only have a unique bandit game, but may have more than one algorithms\n",
        "        self.mp_mab_env = None\n",
        "        # to be extended\n",
        "        if configuration['env_type'] == 'uniform':            \n",
        "            self.mp_mab_env = MP_MAB.uniform_mab(self.context_set, self.nbArms, self.nbPlayers, \n",
        "                                                  dic_lower = configuration['initial data'][0], \n",
        "                                                  dic_upper = configuration['initial data'][1])\n",
        "            \n",
        "            # 'context probabilites' is used for a differernt purpose in HetNet simulator\n",
        "            if 'context probabilites' in configuration.keys():\n",
        "                # set arbitrary probabilities for discrete context distribution\n",
        "                context_probabilites = configuration['context probabilites']\n",
        "                self.mp_mab_env.set_discrete_context_prob(context_probabilites)\n",
        "        elif configuration['env_type'] == 'gaussian':\n",
        "            self.mp_mab_env = MP_MAB.uniform_mab(self.context_set, self.nbArms, self.nbPlayers, \n",
        "                                                  dic_mean = configuration['initial data'][0], \n",
        "                                                  dic_sigma = configuration['initial data'][1])\n",
        "            \n",
        "            # 'context probabilites' is used for a differernt purpose in HetNet simulator\n",
        "            if 'context probabilites' in configuration.keys():\n",
        "                # set arbitrary probabilities for discrete context distribution\n",
        "                context_probabilites = configuration['context probabilites']\n",
        "                self.mp_mab_env.set_discrete_context_prob(context_probabilites)       \n",
        "        elif configuration['env_type'] == 'HetNet simulator':\n",
        "            hetnet_params = {'enabel mmWave': configuration['enabel mmWave'],\n",
        "                             'horizon': self.horizon,\n",
        "                             'cell range': configuration['cell range'],\n",
        "                             'context_prob': configuration['context_prob'],\n",
        "                             'los_prob': configuration['los_prob']\n",
        "                             }\n",
        "            \n",
        "            self.mp_mab_env = HomeBrewedHetNetEnv.HetNet_mab(self.context_set, self.nbArms, self.nbPlayers, \n",
        "                                                             hetnet_params)            \n",
        "#            print(\"showing UE and MUE positions\") #debugging\n",
        "#            self.mp_mab_env.helper_plot_ue_posiiton() #debugging\n",
        "            \n",
        "        elif configuration['env_type'] == 'load data':\n",
        "            #TODO: load the series of arm values from a existing file\n",
        "#            self.flag_pre_prepare = True\n",
        "            pass        \n",
        "                        \n",
        "        self.algorithms = [] # a list of algorithms        \n",
        "        self.result_recorders = [] # a list of result recorder for each algorithm  \n",
        "        self.alg_names = []\n",
        "        \n",
        "    def prepare_arm_samples(self, horizon = None):\n",
        "        if horizon is not None:\n",
        "            self.horizon = horizon\n",
        "        \n",
        "        self.mp_mab_env.prepare_samples(self.horizon)\n",
        "            \n",
        "        self.flag_pre_prepare = True\n",
        "        \n",
        "    def reset_player_number(self, nbPlayer=None):\n",
        "        # it is allowed only to be done after the samples are prepared\n",
        "        if nbPlayer is None or self.flag_pre_prepare == False:\n",
        "            return False\n",
        "        else:\n",
        "            self.nbPlayers = nbPlayer\n",
        "            self.mp_mab_env.nbPlayers = nbPlayer\n",
        "            \n",
        "            return True\n",
        "            \n",
        "    def reset_arm_number(self, nbArm=None):\n",
        "        # it is allowed only be done after the samples are prepared\n",
        "        # we are not goning to change the real record of the arm values\n",
        "        if nbArm is None or self.flag_pre_prepare == False:\n",
        "            return False\n",
        "        else:\n",
        "            self.nbArms = nbArm\n",
        "            self.mp_mab_env.nbArms = nbArm\n",
        "            \n",
        "            return True\n",
        "    \n",
        "    def clear_algorithms(self):\n",
        "        # clear all existing algorithms and their corresponding recorders\n",
        "        self.algorithms = []\n",
        "        self.result_recorders = []\n",
        "        self.alg_names = []\n",
        "    \n",
        "    def add_algorithm(self, algo_type = 'Trial and Error', custome_params=None):\n",
        "        \"\"\" Create environments.\"\"\"\n",
        "        alg_params = {\"nbPlayer\": self.nbPlayers, \"nbArm\": self.nbArms, \"context_set\": self.context_set}\n",
        "        \n",
        "        #for each algorithm, append a recorder\n",
        "        if algo_type == 'Trial and Error' or algo_type == 'TnE Nonobservable':\n",
        "            #create a trial-and-error algorithm\n",
        "            alg_params[\"horizon\"] = self.horizon\n",
        "            alg_params[\"c1\"] = custome_params[\"c1\"] if custome_params is not None else 100\n",
        "            alg_params[\"c2\"] = custome_params[\"c2\"] if custome_params is not None else 5\n",
        "            alg_params[\"c3\"] = custome_params[\"c3\"] if custome_params is not None else 1\n",
        "            \n",
        "            alg_params[\"epsilon\"] = custome_params[\"epsilon\"] if custome_params is not None else 0.1\n",
        "            alg_params[\"delta\"] = custome_params[\"delta\"] if custome_params is not None else 2\n",
        "                    \n",
        "            if \"alpha11\" in custome_params.keys():\n",
        "                alg_params[\"alpha11\"] = custome_params[\"alpha11\"]\n",
        "            \n",
        "            if \"alpha12\" in custome_params.keys():\n",
        "                alg_params[\"alpha12\"] = custome_params[\"alpha12\"]\n",
        "                \n",
        "            if \"alpha21\" in custome_params.keys():\n",
        "                alg_params[\"alpha21\"] = custome_params[\"alpha21\"]\n",
        "                \n",
        "            if \"alpha22\" in custome_params.keys():\n",
        "                alg_params[\"alpha22\"] = custome_params[\"alpha22\"]                \n",
        "            \n",
        "            alg_TnE = TrialandError(alg_params)\n",
        "                        \n",
        "            if  \"observable\" in custome_params.keys():\n",
        "                alg_TnE.set_context_observability(custome_params[\"observable\"]==1)\n",
        "            \n",
        "            self.algorithms.append(alg_TnE)\n",
        "                        \n",
        "            if algo_type == 'Trial and Error':\n",
        "                result_TnE = ResultMultiPlayers(algo_type, \n",
        "                                            self.context_set, self.nbPlayers, self.nbArms, self.horizon) \n",
        "                self.result_recorders.append(result_TnE)\n",
        "                self.alg_names.append(algo_type)\n",
        "            else:\n",
        "                result_TnE = ResultMultiPlayers('Non-Contextual TnE', \n",
        "                                            self.context_set, self.nbPlayers, self.nbArms, self.horizon)  \n",
        "                self.result_recorders.append(result_TnE)                                              \n",
        "                self.alg_names.append('Non-Contextual TnE')\n",
        "            \n",
        "        elif algo_type == 'Musical Chairs': #str(MusicalChair)\n",
        "            alg_params[\"horizon\"] = self.horizon\n",
        "            # 3000 is hardcoded, as given by the original paper [Rosenski2015]\n",
        "            alg_params[\"T0\"] = custome_params[\"T0\"] if custome_params is not None else 3000 \n",
        "            \n",
        "            alg_MC = MusicalChairs(alg_params)\n",
        "            self.algorithms.append(alg_MC)\n",
        "            \n",
        "            # to record the learning results of alg_MC\n",
        "            result_MC = ResultMultiPlayers(algo_type, \n",
        "                                           self.context_set, self.nbPlayers, self.nbArms, self.horizon)\n",
        "            self.result_recorders.append(result_MC)\n",
        "            \n",
        "            self.alg_names.append(algo_type)\n",
        "        \n",
        "        elif algo_type == 'SIC-MMAB': #str(SICMMB)\n",
        "            alg_params[\"horizon\"] = self.horizon\n",
        "            alg_SICMMAB = SICMMAB(alg_params)\n",
        "            self.algorithms.append(alg_SICMMAB)\n",
        "            \n",
        "            # to record the learning results of alg_MC\n",
        "            result_SICMMAB = ResultMultiPlayers(algo_type, \n",
        "                                           self.context_set, self.nbPlayers, self.nbArms, self.horizon)\n",
        "            self.result_recorders.append(result_SICMMAB)\n",
        "            \n",
        "            self.alg_names.append(algo_type)\n",
        "            \n",
        "        elif algo_type == 'Hungarian': #str(Hungarian)\n",
        "            alg_Hungarian = Hungarian(alg_params)\n",
        "            self.algorithms.append(alg_Hungarian)\n",
        "             \n",
        "            result_hungarian = ResultMultiPlayers(algo_type, \n",
        "                                                  self.context_set, self.nbPlayers, self.nbArms, self.horizon)\n",
        "            self.result_recorders.append(result_hungarian)\n",
        "            \n",
        "            self.alg_names.append(algo_type)\n",
        "            \n",
        "        elif algo_type == 'Static Hungarian':\n",
        "            game_env = {}\n",
        "            \n",
        "            array_context, array_prob = self.mp_mab_env.get_discrete_context_prob()\n",
        "            alg_params[\"array_context\"] = array_context\n",
        "            alg_params[\"array_prob\"] = array_prob\n",
        "            \n",
        "            for context in self.context_set:\n",
        "                 lower, upper, means, variance = self.mp_mab_env.get_param(context)                 \n",
        "                 game_env[context] = means\n",
        "\n",
        "            alg_params[\"mean_game_env\"] = game_env\n",
        "            \n",
        "            alg_SHungarian = StaticHungarian(alg_params)\n",
        "            self.algorithms.append(alg_SHungarian)\n",
        "             \n",
        "            result_static_hungarian = ResultMultiPlayers(algo_type, \n",
        "                                                         self.context_set, self.nbPlayers, self.nbArms, self.horizon)\n",
        "            self.result_recorders.append(result_static_hungarian)\n",
        "            \n",
        "            self.alg_names.append(algo_type)\n",
        "        elif  algo_type == 'Nonobservable-context Hungarian':\n",
        "            # when the algorithm is not able to observe the context (side information)\n",
        "            # the algorithm provides a optimal result in terms of normal MP-MAB            \n",
        "            game_env = {}            \n",
        "            game_mean = np.zeros((self.nbPlayers,self.nbArms))\n",
        "            \n",
        "            array_context, array_prob = self.mp_mab_env.get_discrete_context_prob()\n",
        "            alg_params[\"array_context\"] = array_context\n",
        "            alg_params[\"array_prob\"] = array_prob\n",
        "\n",
        "            for context_id in range(len(array_context)):\n",
        "                lower, upper, means, variance = self.mp_mab_env.get_param(array_context[context_id]) \n",
        "                game_mean = game_mean + means * array_prob[context_id]\n",
        "            \n",
        "            for context in self.context_set:\n",
        "                 lower, upper, means, variance = self.mp_mab_env.get_param(context)                 \n",
        "                 game_env[context] = game_mean\n",
        "\n",
        "            alg_params[\"mean_game_env\"] = game_env\n",
        "            \n",
        "            alg_SHungarian = StaticHungarian(alg_params)\n",
        "            self.algorithms.append(alg_SHungarian)\n",
        "             \n",
        "            result_static_hungarian = ResultMultiPlayers(algo_type, \n",
        "                                                         self.context_set, self.nbPlayers, self.nbArms, self.horizon)\n",
        "            self.result_recorders.append(result_static_hungarian)  \n",
        "            \n",
        "            self.alg_names.append(algo_type)\n",
        "        elif algo_type == 'Game of Thrones':\n",
        "            alg_params[\"horizon\"] = self.horizon\n",
        "            \n",
        "            alg_params[\"c1\"] = custome_params[\"c1\"] if custome_params is not None else 100\n",
        "            alg_params[\"c2\"] = custome_params[\"c2\"] if custome_params is not None else 5\n",
        "            alg_params[\"c3\"] = custome_params[\"c3\"] if custome_params is not None else 1\n",
        "            \n",
        "            alg_params[\"epsilon\"] = custome_params[\"epsilon\"] if custome_params is not None else 0.1\n",
        "            alg_params[\"delta\"] = custome_params[\"delta\"] if custome_params is not None else 2\n",
        "            \n",
        "            alg_GoT = GameofThrone(alg_params)\n",
        "            self.algorithms.append(alg_GoT)\n",
        "                        \n",
        "            result_GoT = ResultMultiPlayers(algo_type, \n",
        "                                            self.context_set, self.nbPlayers, self.nbArms, self.horizon) \n",
        "            self.result_recorders.append(result_GoT)\n",
        "            \n",
        "            self.alg_names.append(algo_type)\n",
        "        elif algo_type == \"SOC\":\n",
        "            alg_params[\"delta\"] = custome_params[\"delta\"] if custome_params is not None else 0.1\n",
        "            \n",
        "            alg_SOC = SOC(alg_params)\n",
        "            self.algorithms.append(alg_SOC)\n",
        "            \n",
        "            result_SOC = ResultMultiPlayers(algo_type, \n",
        "                                            self.context_set, self.nbPlayers, self.nbArms, self.horizon) \n",
        "            self.result_recorders.append(result_SOC)\n",
        "            \n",
        "            self.alg_names.append(algo_type) # use the full name of 'Stable Orthogonal Allocation'\n",
        "        elif algo_type == \"ESE\":\n",
        "            alg_params[\"delta_R\"] = custome_params[\"delta_R\"] if custome_params is not None else 0.1\n",
        "            \n",
        "            alg_ESE = ESE(alg_params)\n",
        "            self.algorithms.append(alg_ESE)\n",
        "            \n",
        "            result_ESE = ResultMultiPlayers(algo_type, \n",
        "                                            self.context_set, self.nbPlayers, self.nbArms, self.horizon) \n",
        "            self.result_recorders.append(result_ESE)\n",
        "            \n",
        "            self.alg_names.append(algo_type) # use the full name of 'Stable Orthogonal Allocation'\n",
        "            \n",
        "        else:\n",
        "             #TODO: add other algorithms here\n",
        "             print(\"The algorithm type '{}' is not identified\".format(algo_type))    \n",
        "    \n",
        "    def reset_algorithms(self, horizon = None):\n",
        "        \"\"\"\n",
        "        reset the internal states/recorders of the algorithms\n",
        "        \"\"\"\n",
        "        if horizon is not None:\n",
        "            if self.flag_pre_prepare:\n",
        "                if self.horizon < horizon:\n",
        "                    raise Exception(\"horizon exceeds the maximum recorded values\")\n",
        "                else:\n",
        "                    self.horizon = horizon\n",
        "            else:\n",
        "                self.horizon = horizon\n",
        "        \n",
        "        for index in range(len(self.algorithms)):\n",
        "            self.algorithms[index].reset(horizon)\n",
        "            self.result_recorders[index].reset_record(horizon)\n",
        "            \n",
        "        self.flag_simulation_done = False\n",
        "\n",
        "    #----- play the bandit game with all the registered algorithms\n",
        "    def play_game(self, algorithm_ids=None, horizon=None, flag_progress_bar=False):\n",
        "        \"\"\"\n",
        "        play_game() produces a single round of simulation results in a sequentail way.\n",
        "        It also works if there is no pre-prepared environment.\n",
        "        \"\"\"\n",
        "        self.reset_algorithms()\n",
        "        \n",
        "        alg_list = []\n",
        "        recorder_list = []\n",
        "        if algorithm_ids is None:\n",
        "            alg_list = self.algorithms\n",
        "            recorder_list = self.result_recorders\n",
        "        else:\n",
        "            alg_list = [self.algorithms[index] for index in algorithm_ids]\n",
        "            recorder_list = [self.result_recorders[index] for index in algorithm_ids]\n",
        "            \n",
        "        if horizon is None:\n",
        "            horizon = self.horizon\n",
        "        \n",
        "        if flag_progress_bar:\n",
        "            progress_range = tqdm(range(horizon))\n",
        "        else:\n",
        "            progress_range = range(horizon)       \n",
        "        \n",
        "        for t in progress_range:\n",
        "            # sample arms\n",
        "            if self.flag_pre_prepare == True:\n",
        "                context, arm_values = self.mp_mab_env.draw_sample(t)\n",
        "            else:\n",
        "                context, arm_values = self.mp_mab_env.draw_sample()         \n",
        "                \n",
        "            # trim the arm_value array if needed                \n",
        "            arm_values = arm_values[:self.nbPlayers, :self.nbArms]\n",
        "#            print(\"shape of arm_values: {}\".format(np.shape(arm_values)))\n",
        "            \n",
        "            for alg_index in range(len(alg_list)):\n",
        "               pulls, total_reward, sampled_rewards = alg_list[alg_index].learn_policy(arm_values, context, t)\n",
        "               arm_choices = alg_list[alg_index].pulls2choices(pulls)\n",
        "               action_collisions = alg_list[alg_index].resolve_collision(pulls)\n",
        "               recorder_list[alg_index].store(t, context, arm_choices, sampled_rewards, total_reward, pulls, action_collisions)\n",
        "               \n",
        "        self.flag_simulation_done = True\n",
        "                    \n",
        "    #----- play the bandit game with all the registered algorithms in a parallel manner\n",
        "    def play_game_parallel(self, algorithm_ids=None, horizon=None, flag_progress_bar=False, step=100):\n",
        "        \"\"\"\n",
        "        play_game_parallel() is restricted to work for the pre-prepared environment only.\n",
        "        The extral time used for pickling the data is not negligible. \n",
        "        Multiprocessing doesn't improve much the efficiency if len(algorithm_ids) is less than 3 for small horizons.\n",
        "        \"\"\"        \n",
        "        assert self.flag_pre_prepare == True, \"the environment has to be prepared\"\n",
        "        self.reset_algorithms()\n",
        "        \n",
        "        # for parallel computing on a sngle machine\n",
        "        max_nb_processes = max(mp.cpu_count()-2, 1)\n",
        "        task_pool = mp.Pool(processes = max_nb_processes)     \n",
        "        \n",
        "        alg_list = []\n",
        "        recorder_list = []\n",
        "        if algorithm_ids is None:\n",
        "            alg_list = self.algorithms\n",
        "            recorder_list = self.result_recorders\n",
        "        else:\n",
        "            alg_list = [self.algorithms[index] for index in algorithm_ids]\n",
        "            recorder_list = [self.result_recorders[index] for index in algorithm_ids]\n",
        "            \n",
        "        if horizon is None:\n",
        "            horizon = self.horizon\n",
        "            \n",
        "        results = []\n",
        "        \n",
        "        if flag_progress_bar == False:\n",
        "            for alg_index in range(len(alg_list)):\n",
        "                 res = task_pool.apply_async(self.async_simulation_work, \n",
        "                                               args = (horizon, alg_index, self.mp_mab_env, \n",
        "                                                       alg_list[alg_index], recorder_list[alg_index]))                \n",
        "                 results.append(res)\n",
        "                      \n",
        "            task_pool.close()\n",
        "            task_pool.join()\n",
        "        else:\n",
        "            manager = mp.Manager()  \n",
        "            queue = manager.Queue()\n",
        "            for alg_index in range(len(alg_list)):\n",
        "                 res = task_pool.apply_async(self.async_simulation_work, \n",
        "                                               args = (horizon, alg_index, self.mp_mab_env, \n",
        "                                                       alg_list[alg_index], recorder_list[alg_index], queue, step))                \n",
        "                 results.append(res)\n",
        "                 \n",
        "            # add the monitoring process\n",
        "            print(\"single-shot: number of iteration: {}\".format(len(alg_list)*horizon))\n",
        "            # add the monitoring process\n",
        "            proc = mp.Process(target=self.porgress_monitor, \n",
        "                              args=(queue, len(alg_list), horizon))\n",
        "            \n",
        "            # start the processes\n",
        "            proc.start()            \n",
        "            task_pool.close()\n",
        "            task_pool.join()               \n",
        "            queue.put(None)\n",
        "            proc.join()\n",
        "               \n",
        "        # each task do not exchange info. with each other\n",
        "        self.flag_simulation_done = True\n",
        "        \n",
        "        for res in results:\n",
        "            recorder = res.get()\n",
        "            recorder_list[recorder[0]] = recorder[1]\n",
        "        \n",
        "#        print(\"AlgEvaluator finishes parallelization\")\n",
        "  \n",
        "    @staticmethod\n",
        "    def async_simulation_work(horizon, alg_index, env, alg, recorder, queue=None, step=100):\n",
        "        \"\"\"\n",
        "        async_simu_work() is restricted to be called in play_game_parallel() only.\n",
        "        To avoid passing the pool member, we make it a static method.\n",
        "        \"\"\"  \n",
        "        # each task is identified by a tuple (alg_index, horizon)\n",
        "        progress_range = range(horizon)\n",
        "            \n",
        "        for t in progress_range:\n",
        "            context, arm_values = env.draw_sample(t)\n",
        "            \n",
        "            arm_values= arm_values[:env.nbPlayers, :env.nbArms]\n",
        "#            print(\"shape of arm_values: {}\".format(np.shape(arm_values)))\n",
        "                \n",
        "            pulls, total_reward, sampled_rewards = alg.learn_policy(arm_values, context, t)\n",
        "            arm_choices = alg.pulls2choices(pulls)\n",
        "            action_collisions = alg.resolve_collision(pulls)\n",
        "            recorder.store(t, context, arm_choices, sampled_rewards, total_reward, pulls, action_collisions)     \n",
        "            \n",
        "            if queue is not None:\n",
        "                if t % step == 0:\n",
        "                    queue.put_nowait(step)                 \n",
        "                \n",
        "        return (alg_index, recorder)\n",
        "    \n",
        "    def play_repeated_game(self, horizon_list, algorithm_ids=None, \n",
        "                           simulation_rounds=1, flag_progress_bar=False):\n",
        "        \"\"\"\n",
        "        Play the game repeatedly with different horizons in single-process mode. \n",
        "        It only works with the pre-prepared environment.\n",
        "        The recorder accompanying each algorithm do not work here,\n",
        "        since they store only the results from the last run.\n",
        "        \n",
        "        play_repeated_game() return a dictionary with the keys:\n",
        "            {'algorithm_name', 'reward_series', 'collision_series', 'horizon'},\n",
        "        where 'reward_series', 'horizon' and 'collision_series' are 2D arrays,\n",
        "        with the rows aligned with elements in 'algorithm_name'\n",
        "        \"\"\"\n",
        "        assert self.flag_pre_prepare == True, \"the environment has to be prepared\"\n",
        "        self.reset_algorithms()\n",
        "\n",
        "        alg_names = self.get_alg_names(algorithm_ids)        \n",
        "        # reward_series records the reward data for each algorithm \n",
        "        # in a form (len(algorithm_ids), simulation_rounds*len(horizon_list))\n",
        "        # other records are defined in the same form\n",
        "        if algorithm_ids==None:\n",
        "            algorithm_ids = list(range(len(self.algorithms)))\n",
        "        \n",
        "        reward_series = np.zeros((len(algorithm_ids), simulation_rounds*len(horizon_list)))\n",
        "        collision_series = np.zeros((len(algorithm_ids), simulation_rounds*len(horizon_list)))\n",
        "        switching_count_series = np.zeros((len(algorithm_ids), simulation_rounds*len(horizon_list)))\n",
        "        horizon_series = np.zeros((len(algorithm_ids), simulation_rounds*len(horizon_list)))\n",
        "        \n",
        "        # convert types (convert ndarray to list)\n",
        "        if isinstance(horizon_list, list) != True:\n",
        "            horizon_list = np.ndarray.tolist(horizon_list)\n",
        "        \n",
        "#        print(\"number of algorithms: {}\".format(len(algorithm_ids)))\n",
        "        \n",
        "        if flag_progress_bar:\n",
        "            progress_range = tqdm(range(simulation_rounds))\n",
        "        else:\n",
        "            progress_range = range(simulation_rounds)    \n",
        "        \n",
        "        for simu_index in progress_range:\n",
        "            if flag_progress_bar == False:\n",
        "                print(\"Simulation round {} of total rounds {}...\".format(simu_index+1, simulation_rounds))       \n",
        "            \n",
        "            for horizon in horizon_list:\n",
        "                self.play_game(algorithm_ids, horizon=int(horizon), flag_progress_bar=False) # could set to None\n",
        "                    \n",
        "                # example: for 3 algorithms, len(tmp_total_payoff) == 3\n",
        "                tmp_total_payoff = self.get_total_payoff(algorithm_ids, horizon=int(horizon))\n",
        "                tmp_total_collision = self.get_total_collision(algorithm_ids, horizon=int(horizon))\n",
        "                tmp_total_switching = self.get_total_switching_count(algorithm_ids, horizon=int(horizon))\n",
        "                \n",
        "                idx_horizon = horizon_list.index(horizon)\n",
        "\n",
        "                id_plays = simu_index * len(horizon_list) + idx_horizon\n",
        "                # record the reward obtained in this single round, \n",
        "                # the following is prepared for a dataframe format                \n",
        "                for id_alg in range(len(algorithm_ids)):\n",
        "                    horizon_series[id_alg][id_plays] = horizon\n",
        "                    reward_series[id_alg][id_plays] = tmp_total_payoff[id_alg]\n",
        "                    collision_series[id_alg][id_plays] = tmp_total_collision[id_alg]#\n",
        "                    switching_count_series[id_alg][id_plays] = tmp_total_switching[id_alg]\n",
        "                \n",
        "        simulation_results = {}                \n",
        "        simulation_results['reward_series'] = reward_series\n",
        "        simulation_results['collision_series'] = collision_series          \n",
        "        simulation_results['switching_count_series'] = switching_count_series\n",
        "        simulation_results['horizon'] = horizon_series\n",
        "        simulation_results['algorithm_name'] = alg_names\n",
        "        \n",
        "        return simulation_results\n",
        "    \n",
        "    #----- play the bandit game with (all) the registered algorithms in a parallel manner\n",
        "    def play_repeated_game_parallel(self, horizon_list, algorithm_ids=None, \n",
        "                                    simulation_rounds=1, flag_progress_bar=False, step=1):\n",
        "        \"\"\"\n",
        "        parallel version of repeated_game_play(). \n",
        "        play_repeated_game_parallel() only works with the pre-prepared environment.\n",
        "        \"\"\"\n",
        "        assert self.flag_pre_prepare == True, \"the environment has to be prepared\"\n",
        "        self.reset_algorithms()        \n",
        "\n",
        "        alg_list = []\n",
        "        recorder_list = []\n",
        "        if algorithm_ids is None:\n",
        "            alg_list = self.algorithms\n",
        "            recorder_list = self.result_recorders\n",
        "        else:\n",
        "            alg_list = [self.algorithms[index] for index in algorithm_ids]\n",
        "            recorder_list = [self.result_recorders[index] for index in algorithm_ids]\n",
        "                \n",
        "        # for parallel computing on a sngle machine\n",
        "        max_nb_processes = max(mp.cpu_count()-2, 1)        \n",
        "        task_pool = mp.Pool(processes = max_nb_processes)       \n",
        "            \n",
        "        # add works to the task pool\n",
        "        results = []        \n",
        "        if flag_progress_bar == True:\n",
        "            manager = mp.Manager()  \n",
        "            queue = manager.Queue()\n",
        "            for alg_index in range(len(alg_list)):    \n",
        "                res = task_pool.apply_async(self.async_repeated_work, \n",
        "                                            args = (self.mp_mab_env, alg_list[alg_index], \n",
        "                                                    alg_index, horizon_list, recorder_list[alg_index], \n",
        "                                                    simulation_rounds, queue, step)) \n",
        "                # append the results\n",
        "                results.append(res)\n",
        "                \n",
        "            # add the monitoring process\n",
        "            proc = mp.Process(target=self.porgress_monitor, \n",
        "                              args=(queue, len(alg_list), simulation_rounds))\n",
        "            # start the processes\n",
        "            proc.start()            \n",
        "            task_pool.close()\n",
        "            task_pool.join()               \n",
        "            queue.put(None)\n",
        "            proc.join()            \n",
        "        else:\n",
        "            for alg_index in range(len(alg_list)): \n",
        "                res = task_pool.apply_async(self.async_repeated_work, \n",
        "                                            args = (self.mp_mab_env, alg_list[alg_index], \n",
        "                                                    alg_index, horizon_list, recorder_list[alg_index], \n",
        "                                                    simulation_rounds)) \n",
        "                # append the results\n",
        "                results.append(res)            \n",
        "            # start the processes\n",
        "            task_pool.close()\n",
        "            task_pool.join()             \n",
        "               \n",
        "        # each task do not exchange info. with each other\n",
        "        self.flag_simulation_done = True\n",
        "                \n",
        "        # reward_series records the reward data for each algorithm \n",
        "        # in a form (len(algorithm_ids), simulation_rounds*len(horizon_list))\n",
        "        # all other records are defined in the same form\n",
        "        reward_series = np.empty((0, simulation_rounds*len(horizon_list)))\n",
        "        collision_series = np.empty((0, simulation_rounds*len(horizon_list)))\n",
        "        switching_count_series = np.empty((0, simulation_rounds*len(horizon_list)))\n",
        "        horizon_series = np.zeros((0, simulation_rounds*len(horizon_list)))\n",
        "        alg_indicators = []\n",
        "        \n",
        "        # re-organize the results of each algorithm        \n",
        "        for res in results:            \n",
        "            alg_id, recorder, reward, collision, switching_count, horizons = res.get()                        \n",
        "            # fill the recorded data with the last-round result\n",
        "            self.result_recorders[alg_id] = recorder                       \n",
        "            \n",
        "            # add a new row\n",
        "            reward_series = np.append(reward_series, [reward], axis=0)\n",
        "            collision_series = np.append(collision_series, [collision], axis=0)\n",
        "            switching_count_series = np.append(switching_count_series, [switching_count], axis=0)\n",
        "            horizon_series = np.append(horizon_series, [horizons], axis=0)\n",
        "            \n",
        "            alg_indicators.append(alg_id)\n",
        "\n",
        "        simulation_results = {}                \n",
        "        simulation_results['reward_series'] = reward_series       \n",
        "        simulation_results['collision_series'] = collision_series            \n",
        "        simulation_results['switching_count_series'] = switching_count_series      \n",
        "        \n",
        "        simulation_results['horizon'] = horizon_series\n",
        "        simulation_results['algorithm_name'] = [self.alg_names[index] for index in alg_indicators] \n",
        "\n",
        "#        print(\"len of collision_series:{}\".format((collision_series.shape)))\n",
        "#        print(\"len of reward_series:{}\".format((reward_series.shape)))\n",
        "#        print(\"len of switching_count_series:{}\".format((switching_count_series.shape)))\n",
        "#        print(\"len of horizon_series:{}\".format((horizon_series.shape)))\n",
        "        \n",
        "        return simulation_results   \n",
        "     \n",
        "    @staticmethod\n",
        "    def async_repeated_work(env, algrithm, alg_index, horizon_list, recorder, simulation_rounds=1, queue=None, step=1):\n",
        "        \"\"\"\n",
        "        async_repeated_work() is should be only called by repeated_game_play_parallel().\n",
        "        To avoid passing the pool member, we make it a static method.\n",
        " \n",
        "        - a task is identified by a tuple (algrithm, horizon_list)        \n",
        "        - 'reward_series' records the reward data for algorithm identified by 'alg_index'\n",
        "          in an 1-D array of len(simulation_rounds)*len(horizon_list)\n",
        "        - other records are defined in the same form      \n",
        "        \"\"\" \n",
        "        reward_series = np.zeros(simulation_rounds*len(horizon_list))\n",
        "        collision_series = np.zeros(simulation_rounds*len(horizon_list))     \n",
        "        switching_count_series = np.zeros(simulation_rounds*len(horizon_list))\n",
        "        horizon_series = np.zeros(simulation_rounds*len(horizon_list))\n",
        "        \n",
        "        #convert horizon type to list if it is an ndarray\n",
        "        if isinstance(horizon_list, list) != True:\n",
        "            horizon_list = np.ndarray.tolist(horizon_list)\n",
        "        \n",
        "        for simu_index in range(simulation_rounds):                            \n",
        "            for horizon in horizon_list:\n",
        "                idx_horizon = horizon_list.index(horizon)\n",
        "                \n",
        "                # reset the algorithm\n",
        "                algrithm.reset()\n",
        "                recorder.reset_record()\n",
        "                \n",
        "                # play the game\n",
        "                progress_range = range(int(horizon))\n",
        "                # initialize the switching count records\n",
        "                tmp_total_switching = 0\n",
        "                \n",
        "                # store the choices according to the contexts that they are in\n",
        "                tmp_switch_dic = {}\n",
        "                tmp_context_count = {}\n",
        "                for context in env.context_set:\n",
        "                    tmp_switch_dic[context] = np.zeros([int(horizon), env.nbPlayers])\n",
        "                    tmp_context_count[context] = 0\n",
        "                \n",
        "                for t in progress_range:\n",
        "                    context, arm_values = env.draw_sample(t)\n",
        "                    \n",
        "                    arm_values = arm_values[:env.nbPlayers, :env.nbArms]\n",
        "                                \n",
        "                    # all in arrays\n",
        "                    pulls, total_reward, sampled_rewards = algrithm.learn_policy(arm_values, context, t)\n",
        "                    arm_choices = algrithm.pulls2choices(pulls)\n",
        "                    action_collisions = algrithm.resolve_collision(pulls)                    \n",
        "                    \n",
        "                    #get collision in arrays\n",
        "                    id_nonzero = np.where(action_collisions != 0)\n",
        "                    action_collisions[id_nonzero] = action_collisions[id_nonzero] - 1\n",
        "\n",
        "                    recorder.store(t, context, arm_choices, sampled_rewards, total_reward, pulls, action_collisions)  \n",
        "                    \n",
        "                    # store choices according to contexts                    \n",
        "                    tmp_switch_dic[context][tmp_context_count[context],:] = arm_choices\n",
        "                    tmp_context_count[context] =  tmp_context_count[context] + 1                    \n",
        "                    \n",
        "                for context in env.context_set:\n",
        "                    # count the switching for each context\n",
        "#                    print(\"Contex: {}, shape: {}\".format(context,  tmp_switch_dic[context].shape))\n",
        "                    \n",
        "                    for tt in range(1, tmp_context_count[context]+1):                \n",
        "                        tmp_switching_count = np.sum(tmp_switch_dic[context][tt,:] != tmp_switch_dic[context][tt-1, :])\n",
        "                        tmp_total_switching += tmp_switching_count     \n",
        "            \n",
        "                # compute directly instead of calling get_total_payoff()\n",
        "                tmp_total_payoff = np.sum(recorder.total_rewards[:int(horizon)])\n",
        "                tmp_total_collision = np.sum(recorder.collisions[:int(horizon)])                            \n",
        "                \n",
        "                id_plays = simu_index * len(horizon_list) + idx_horizon\n",
        "               \n",
        "                reward_series[id_plays] = tmp_total_payoff\n",
        "                collision_series[id_plays] = tmp_total_collision\n",
        "                switching_count_series[id_plays] = tmp_total_switching\n",
        "                horizon_series[id_plays] = horizon\n",
        "            \n",
        "            if queue is not None:\n",
        "                if simu_index % step == 0:                    \n",
        "                    queue.put_nowait(step)\n",
        "                \n",
        "        return (alg_index, recorder, reward_series, collision_series, switching_count_series, horizon_series)\n",
        "    \n",
        "    @staticmethod\n",
        "    def porgress_monitor(queue, nbAlgorithm, nbRound):\n",
        "        \"\"\"\n",
        "        porgress_monitor() is added by the monitor process for updating the simulation progress bar.\n",
        "        nbRound represents the total number of repeatitions in case of a repeated simulation,\n",
        "        or the number of horizon in case of a single-shot simulation\n",
        "        \"\"\" \n",
        "        pbar = tqdm(total = nbAlgorithm*nbRound)\n",
        "        for item in iter(queue.get, None):        \n",
        "            pbar.update(item)\n",
        "    \n",
        "    #----- utility functions\n",
        "    def get_total_payoff(self, algorithm_ids = None, horizon = None):\n",
        "        assert self.flag_simulation_done == True, \"no simulation record is available\"  \n",
        "        \n",
        "        recorder_list = []\n",
        "        if algorithm_ids is None:                \n",
        "            recorder_list = self.result_recorders\n",
        "        else:                \n",
        "            recorder_list = [self.result_recorders[index] for index in algorithm_ids]   \n",
        "            \n",
        "        if horizon is None:\n",
        "            horizon = self.horizon\n",
        "        else:\n",
        "            assert self.horizon >= horizon, \"not enough data for the given value of horizon\"\n",
        "            \n",
        "        array_total_payoff = np.zeros(len(recorder_list))\n",
        "        for index in range(len(recorder_list)):                \n",
        "            array_total_payoff[index] = np.sum(recorder_list[index].total_rewards[:horizon])\n",
        "                \n",
        "        return array_total_payoff\n",
        "        \n",
        "    def get_total_collision(self, algorithm_ids = None, horizon = None):\n",
        "        assert self.flag_simulation_done == True, \"no simulation record is available\"        \n",
        "        \n",
        "        recorder_list = []\n",
        "        if algorithm_ids is None:                \n",
        "            recorder_list = self.result_recorders\n",
        "        else:                \n",
        "            recorder_list = [self.result_recorders[index] for index in algorithm_ids]   \n",
        "        \n",
        "        if horizon is None:\n",
        "            horizon = self.horizon\n",
        "        else:\n",
        "            assert self.horizon >= horizon, \"not enough data for the given value of horizon\"\n",
        "            \n",
        "        array_total_collision = np.zeros(len(recorder_list))\n",
        "        for index in range(len(recorder_list)):    \n",
        "            idx_nonzero = np.where(recorder_list[index].collisions != 0)\n",
        "            \n",
        "            recorder_list[index].collisions[idx_nonzero] = recorder_list[index].collisions[idx_nonzero] - 1\n",
        "            array_total_collision[index] = np.sum(recorder_list[index].collisions[:horizon])\n",
        "            \n",
        "        return array_total_collision\n",
        "    \n",
        "    def get_total_switching_count(self, algorithm_ids = None, horizon = None):\n",
        "        \"\"\"\n",
        "        get the action switching count of the given list of algorithms,\n",
        "        we do it w/r to the context \n",
        "        \"\"\"\n",
        "        assert self.flag_simulation_done == True, \"no simulation record is available\"\n",
        "        \n",
        "        recorder_list = []\n",
        "        if algorithm_ids is None:                \n",
        "            recorder_list = self.result_recorders\n",
        "        else:                \n",
        "            recorder_list = [self.result_recorders[index] for index in algorithm_ids]   \n",
        "            \n",
        "        if horizon is None:\n",
        "            horizon = self.horizon\n",
        "        else:\n",
        "            assert self.horizon >= horizon, \"not enough data for the given value of horizon\"\n",
        "            \n",
        "        array_total_switching_count = np.zeros(len(recorder_list)) # with a number of the algorithms\n",
        "        for index in range(len(recorder_list)):    \n",
        "            total_switching_count = 0\n",
        "            # we add choices into lists w/r to contexts\n",
        "            tmp_switch_dic = {}\n",
        "            tmp_context_count = {}\n",
        "            for context in self.context_set:\n",
        "                # we allocate a bit more than needed\n",
        "                tmp_switch_dic[context] = np.zeros([horizon, self.nbPlayers])\n",
        "                tmp_context_count[context] = 0\n",
        "            \n",
        "            # separate the action choices according to contexts\n",
        "            for tt in range(0, horizon):\n",
        "                context = self.result_recorders[index].context_history[tt]\n",
        "                tmp_switch_dic[context][tmp_context_count[context],:] = self.result_recorders[index].choices[:,tt]\n",
        "                tmp_context_count[context] = tmp_context_count[context] + 1\n",
        "                \n",
        "            for context in self.context_set:\n",
        "                # count the switching for each context\n",
        "                for tt in range(1, tmp_context_count[context]+1):                \n",
        "                    tmp_switching_count = np.sum(tmp_switch_dic[context][tt,:] != tmp_switch_dic[context][tt-1,:])\n",
        "                    total_switching_count += tmp_switching_count\n",
        "                \n",
        "            array_total_switching_count[index] = total_switching_count\n",
        "            \n",
        "        return array_total_switching_count\n",
        "        \n",
        "    def get_alg_names(self, algorithm_ids = None):\n",
        "        \"\"\"\n",
        "        get the name list of the given algorithms\n",
        "        \"\"\"        \n",
        "        if algorithm_ids is None:                \n",
        "            name_list = self.alg_names\n",
        "        else:                \n",
        "            name_list = [self.alg_names[index] for index in algorithm_ids] \n",
        "            \n",
        "        return name_list\n",
        "    \n",
        "    #----- plotting\n",
        "    def plot_rewards(self, algorithm_ids = None, horizon = None, save_fig = False, save_data = False):\n",
        "        if self.flag_simulation_done == False:\n",
        "            print(\"No simulation results are ready\")\n",
        "        else:\n",
        "            recorder_list = []\n",
        "            if algorithm_ids is None:                \n",
        "                recorder_list = self.result_recorders\n",
        "            else:                \n",
        "                recorder_list = [self.result_recorders[index] for index in algorithm_ids]\n",
        "        \n",
        "            recorder_list[0].plot_cumu_rewards(horizon, other_results=recorder_list[1:], save_fig=save_fig, save_data=save_data)\n",
        "            recorder_list[0].plot_avg_reward(horizon, other_results=recorder_list[1:], save_fig=save_fig, save_data=save_data)"
      ],
      "metadata": {
        "id": "rLl0qNKGIeWe"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "class MP_MAB(object):\n",
        "    \"\"\"\n",
        "    i.i.d. multi-arm bandit problem. \n",
        "    The arm value is jointly sampled with the context, and for each player the underlying process may be different.\n",
        "    \"\"\"\n",
        "    def __init__(self, context_set, nbArms, nbPlayers):\n",
        "        \"\"\"New MP-MAB.\"\"\"\n",
        "        print(\"\\nCreating a contextual multi-player MAB game...\")  # DEBUG\n",
        "        \n",
        "        self.nbArms = nbArms\n",
        "        self.nbPlayers = nbPlayers\n",
        "        \n",
        "        self.context_set = context_set\n",
        "        self.context_probabilites = []\n",
        "        self.context_array = [] # may the context iterable\n",
        "        self.flag_context_prob = False\n",
        "        \n",
        "        self.current_arm_value = np.zeros((nbPlayers, nbArms))\n",
        "        self.current_context = None\n",
        "        \n",
        "        self.arms = {}\n",
        "        self.max_arm_value = {} # recording the maximum arm value in case of normalization for each context along the time horizon\n",
        "        \n",
        "        self.horizon = 0\n",
        "        self.flag_sample_prepared = False\n",
        "        \n",
        "    \"\"\"\n",
        "    For different joint distributions of (context, arm-value), we may need different initilization variables.\n",
        "    Call one of the following methods for class instantiation with different types of arms instead of __init__.\n",
        "    \"\"\"\n",
        "        \n",
        "    @classmethod\n",
        "    def uniform_mab(cls, context_set, nbArms, nbPlayers, dic_lower, dic_upper):\n",
        "        uniform_inst = cls(context_set, nbArms, nbPlayers)\n",
        "        \n",
        "        # For each context and each player, we create an arm\n",
        "        for context in context_set:\n",
        "            player_arm_array = [[None]*nbArms for playerID in range(nbPlayers)]\n",
        "            for playerID in range(nbPlayers):\n",
        "                for armID in range(nbArms):\n",
        "                    # if it is a uniform arm\n",
        "                    param = {\"lower_val\": dic_lower[(context, playerID)][armID],\n",
        "                             \"upper_val\": dic_upper[(context, playerID)][armID],\n",
        "                             \"context\": context,\n",
        "                             \"playerID\": playerID,\n",
        "                             \"armID\": armID }\n",
        "                    player_arm_array[playerID][armID] = UniformArm(param)\n",
        "#                print(\"size of the object array: \", len(arm_array))#debug\n",
        "            \n",
        "            uniform_inst.arms[context] = player_arm_array\n",
        "#            print(\"size of the object array for context: \", context, \": (\", len(player_arm_array), \",\", len(player_arm_array[0]), \")\")#debug            \n",
        "        \n",
        "        return uniform_inst\n",
        "    \n",
        "    @classmethod\n",
        "    def gaussian_mab(cls, context_set, nbArms, nbPlayers, dic_mean, dic_sigma):\n",
        "        gaussian_inst = cls(context_set, nbArms, nbPlayers)\n",
        "    \n",
        "        # For each context and each player, we create an arm\n",
        "        for context in context_set:\n",
        "            player_arm_array = [[None]*nbArms for playerID in range(nbPlayers)]\n",
        "            for playerID in range(nbPlayers):\n",
        "                for armID in range(nbArms):\n",
        "                    # if it is a uniform arm\n",
        "                    param = {\"mu\": dic_mean[(context, playerID)][armID],\n",
        "                             \"sigma\": dic_sigma[(context, playerID)][armID],\n",
        "                             \"context\": context,\n",
        "                             \"playerID\": playerID,\n",
        "                             \"armID\": armID }\n",
        "                    player_arm_array[playerID][armID] = GaussianArm(param)\n",
        "#                print(\"size of the object array: \", len(arm_array))#debug\n",
        "            \n",
        "            gaussian_inst.arms[context] = player_arm_array\n",
        "#            print(\"size of the object array for context: \", context, \": (\", len(player_arm_array), \",\", len(player_arm_array[0]), \")\")#debug            \n",
        "        \n",
        "        return gaussian_inst\n",
        "\n",
        "    \n",
        "    def set_discrete_context_prob(self, context_prob):\n",
        "        \"\"\"\n",
        "        assign arbitrary probabilities to contexts\n",
        "        \"\"\"\n",
        "        if set(context_prob.keys()) != self.context_set:\n",
        "            raise Exception(\"probability values do not match the set of context\")\n",
        "        \n",
        "        self.context_array = np.array(list(context_prob.keys()))\n",
        "        \n",
        "        self.context_probabilites = np.array(list(context_prob.values()))\n",
        "        self.context_probabilites = self.context_probabilites / np.sum(self.context_probabilites) # normalize\n",
        "        \n",
        "        self.flag_context_prob = True\n",
        "\n",
        "    def get_discrete_context_prob(self):\n",
        "        if self.flag_context_prob:\n",
        "            return self.context_array, self.context_probabilites\n",
        "        else:\n",
        "            prob = np.ones(len(self.context_set))\n",
        "            return np.array(list(self.context_set)), prob / np.sum(prob)\n",
        "\n",
        "    \"\"\"Draw samples\"\"\"\n",
        "    def draw_sample(self, t=None):\n",
        "         \"\"\" \n",
        "         Draw samples for all the player-arm pairs in a given sampled context.\n",
        "         We enforce that the arm values are drawn in the same global context.\n",
        "         \"\"\"\n",
        "         \n",
        "         # context is finite, so here we can adopt a separate discrete (e.g., uniform) distribution for context evolution\n",
        "         # in the real-world situation context-arm-value can be seen as being sampled from a joint distribution\n",
        "         if self.flag_context_prob == False:\n",
        "             context = np.random.choice(tuple(self.context_set)) # uniform randomly sampled\n",
        "         else:\n",
        "             context = np.random.choice(self.context_array, p=self.context_probabilites)\n",
        "         \n",
        "         player_arm_array = self.arms[context]\n",
        "         for playerID in range(self.nbPlayers):\n",
        "             for armID in range(self.nbArms):\n",
        "                 if  player_arm_array[playerID][armID].playerID != playerID or player_arm_array[playerID][armID].armID != armID:\n",
        "                     raise Exception(\"player ID and arm ID do not match!\")\n",
        "                 \n",
        "                 self.current_arm_value[playerID][armID] = player_arm_array[playerID][armID].draw_sample(context, t)\n",
        "         \n",
        "#         print(\"Sampling arms completes\")\n",
        "         self.current_context = context\n",
        "\n",
        "         return self.current_context,self.current_arm_value\n",
        "        \n",
        "    \"\"\"get the samples in advance\"\"\"\n",
        "    def prepare_samples(self, horizon, flag_progress_bar=False):\n",
        "        if horizon <= 0:\n",
        "            raise Exception(\"Input horizon is not valid\")\n",
        "                    \n",
        "        self.horizon = horizon\n",
        "        \n",
        "        for context in self.context_set:\n",
        "            for playerID in range(self.nbPlayers):\n",
        "                for armID in range(self.nbArms):\n",
        "                    # for each player-arm pair, prepare its sample sequences in each context\n",
        "                    self.arms[context][playerID][armID].prepare_samples(horizon)\n",
        "                    \n",
        "            self.max_arm_value[context] = np.ones(horizon) #\n",
        "                    \n",
        "        self.flag_sample_prepared = True\n",
        "    \n",
        "    \"\"\"utility functions\"\"\"\n",
        "    def get_param(self, context):\n",
        "         lower = np.zeros((self.nbPlayers, self.nbArms))\n",
        "         upper = np.zeros((self.nbPlayers, self.nbArms))\n",
        "         means = np.zeros((self.nbPlayers, self.nbArms))\n",
        "         variance = np.zeros((self.nbPlayers, self.nbArms))\n",
        "         \n",
        "         for playerID in range(self.nbPlayers):\n",
        "             for armID in range(self.nbArms):\n",
        "                 lower[playerID][armID] = self.arms[context][playerID][armID].lower\n",
        "                 upper[playerID][armID] = self.arms[context][playerID][armID].upper\n",
        "                 means[playerID][armID] = self.arms[context][playerID][armID].mean\n",
        "                 variance[playerID][armID] = self.arms[context][playerID][armID].variance\n",
        "                 \n",
        "         return lower, upper, means, variance\n",
        "    \n",
        "    def get_current_param(self, t=None):\n",
        "         \"\"\" \n",
        "         Get the current sampling parameters of arms in the given context.\n",
        "         \"\"\"\n",
        "         if self.current_context is None:\n",
        "             raise Exception(\"The MAB game is not started.\")\n",
        "         \n",
        "         return self.get_param(self.current_context)\n",
        "        \n",
        "    \"\"\"\n",
        "    \n",
        "    \"\"\"\n",
        "    def save_environment(self, file_name=None):\n",
        "        if self.flag_sample_prepared == False:\n",
        "            print(\"No data is prepared\")\n",
        "        else:       \n",
        "            # TODO: we cannot select the path yet, put the file to the default directory \"\\results\" of the current path            \n",
        "            file_path = prepare_file_name(\"{}-{}\".format(file_name if file_name is not None else \"\", \"env\"), \n",
        "                                          alg_name = None, ext_format = \"mat\")\n",
        "        \n",
        "            mdict = {}\n",
        "            for context in self.context_set:\n",
        "                for playerID in range(self.nbPlayers):\n",
        "                    for armID in range(self.nbArms):\n",
        "                        dict_key = \"{}-{}-{}\".format(context, playerID, armID)\n",
        "                        mdict[dict_key] = self.arms[context][playerID][armID].prepared_samples\n",
        "            \n",
        "            scipy.io.savemat(file_path, mdict)\n",
        "        \n",
        "    def load_environment(self, file_path, horizon=None):\n",
        "        mdict = scipy.io.loadmat(file_path)\n",
        "        \n",
        "        for key in mdict:\n",
        "            key_strings = key.split('_')\n",
        "            context = key_strings[0]\n",
        "            playerID = int(key_strings[1])\n",
        "            armID = int(key_strings[2])\n",
        "            \n",
        "            self.arms[context][playerID][armID].prepared_samples = mdict[key]\n",
        "        \n",
        "        self.flag_sample_prepared = True\n",
        "        \n",
        "# ploting methods"
      ],
      "metadata": {
        "id": "X_yHUs2e0GIc"
      },
      "execution_count": 99,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "class HomeBrewedHetNetEnv(MP_MAB):\n",
        "    \"\"\"\n",
        "    The network simulator and its interface for MP_MAB.\n",
        "    In the future version, we planned to incooperate existing simulators such as QuaDRiGa-5G for the channel models for the macro cell. \n",
        "    (see https://quadriga-channel-model.de/#Publications)\n",
        "    For an example of a HetNet simulator over QuaDRiGa, see https://github.com/ICT-Embedded/5GNR-HetNet_Model\n",
        "    Due to the time consumption of building it with matlab engine, we adopt a home-brewed HetNet simulator in this version.\n",
        "    \"\"\"    \n",
        "    def __init__(self, context_set, nbArms=20, nbPlayers=10):\n",
        "        \"\"\"\"\"\"\n",
        "        self.nbArms = nbArms # number of channels\n",
        "        \n",
        "        # for poisson point process it is the intensity of nodes for a square area of 1\n",
        "        # for uniform distribution, it is the number of nodes\n",
        "        assert nbPlayers<=nbArms, \"the number of channels should be no less than the number of devices.\"\n",
        "        self.nbPlayers = nbPlayers \n",
        "        self.nbArms = nbArms\n",
        "        \n",
        "        self.context_set = context_set# \n",
        "        self.prob_LoS = np.zeros(len(context_set))\n",
        "        self.prob_context = np.zeros(len(context_set))\n",
        "        \n",
        "        self.current_arm_value = np.zeros((nbPlayers, nbArms))\n",
        "        self.current_context = None\n",
        "        \n",
        "        self.arms = {};\n",
        "        self.horizon = 0\n",
        "        \n",
        "        self.flag_mmWave = True\n",
        "        \n",
        "        self.ue_position = []\n",
        "        self.bs_position = []\n",
        "        \n",
        "        self.nb_mue = 0\n",
        "        self.mue_position = []# macro cell UE\n",
        "        self.mue_mean_vel = []\n",
        "        self.mue_mean_dir = []\n",
        "        \n",
        "        #basic parameters of channel, not exposed to the parameter setting yet\n",
        "        self.frequence = 28e9 # 28GHz \n",
        "        self.nb_UPBC = 4# number of unique pointing beans combined\n",
        "        self.wf_A = 0.07# weighting factor via MMSE for fitting BC-CI path loss model\n",
        "        self.ue_shadow_variance = np.zeros((nbPlayers, nbArms)) # currently based on an arbitrary value, e.g., 9\n",
        "        self.ue_fading_variance = np.ones((nbPlayers, nbArms)) # currently based on an arbitrary value\n",
        "        self.mobile_alpha = 0.3\n",
        "        \n",
        "        self.mue_shadow_variance = np.zeros((len(context_set))) # the same across arms\n",
        "        \n",
        "        \"\"\"\n",
        "        The path loss exponent model is silightly different w.r.t. to different experiments in the literature.\n",
        "        According to \"Path Loss, Shadow Fading, and Line-Of-Sight Probability Models for 5G Urban Macro-Cellular Scenarios\", [Sun2015],\n",
        "        PLE_LoS = 2.1 and PLE_NLoS = 2.6 for the CI model in the 28GHz-urban macro-cellular scenario\n",
        "        \"\"\"        \n",
        "        self.PLE_LoS = 2 # path loss exponent LoS\n",
        "        self.PLE_NLoS = 3 # path loss exponent NLoS\n",
        "        self.mue_power = 10 * np.random.uniform(low=0.5, high=1.0, size=len(context_set)) # 40 dBm, 10w\n",
        "        self.ue_power = 1 # 30 dBm, 1w\n",
        "        self.atenna_gain = 3 #dBi        \n",
        "        self.noise = 5e-17 # Watt \n",
        "        \n",
        "        # for beamforming, the oversampling factor is 1\n",
        "        # we consider the beamforming vector to be randomly choosen, \n",
        "        # this project does not aim to provide mechanisms of optimizing it\n",
        "        self.F = np.zeros([self.nb_UPBC, self.nb_UPBC], dtype=complex)\n",
        "        theta = np.pi * np.arange(start=0., stop=1., step=1./self.nb_UPBC) \n",
        "        # Beamforming codebook F\n",
        "        for nn in np.arange(self.nb_UPBC):\n",
        "            exponent = 1j * np.pi * np.cos(theta[nn]) * np.arange(self.nb_UPBC)            \n",
        "            bf_vec = 1. / np.sqrt(self.nb_UPBC) * np.exp(exponent)                        \n",
        "            self.F[:,nn] = bf_vec[nn]\n",
        "        \n",
        "        self.mue_cb_idx = np.random.randint(self.nb_UPBC)\n",
        "        # to simplify the process of computation, we consider the IoT devices are using the same ones\n",
        "        # it does not affect the simulation results\n",
        "        self.iot_cb_idx = np.random.randint(self.nb_UPBC) \n",
        "        \n",
        "        # recorder of the pre-sampled arm values\n",
        "        self.arm_values = {}\n",
        "        self.max_arm_value ={} # recording the maximum rate for normalization for each context along the time horizon\n",
        "        for context in self.context_set:\n",
        "            self.arm_values[context] = []\n",
        "            self.max_arm_value[context] = []\n",
        "        \n",
        "        self.flag_sample_prepared = False\n",
        "        \n",
        "    @classmethod\n",
        "    def HetNet_mab(cls, context_set, nbArms, nbPlayers, hetnet_params):\n",
        "        \"\"\"\n",
        "        A number of parameters are hardcoded for the purpose of simplification. \n",
        "        However, they can be easily exposed to the upper layer by moving into 'hetnet_params'\n",
        "        \n",
        "        \"\"\"\n",
        "        hetnet_inst = cls(context_set, nbArms, nbPlayers)\n",
        "        \n",
        "        hetnet_inst.horizon = hetnet_params['horizon']        \n",
        "        hetnet_inst.flag_mmWave = hetnet_params['enabel mmWave']\n",
        "        \n",
        "        cell_range = hetnet_params['cell range'] if 'cell range' in hetnet_params.keys() else 200\n",
        "        hetnet_inst.bs_position = np.array([0.5 * cell_range, 0.5 * cell_range]) # always placed at the center     \n",
        "        hetnet_inst.ue_position, new_nbPlayer = hetnet_inst.initialize_UE_position(nbPlayers=nbPlayers, distance = cell_range,\n",
        "                                  dist_model=hetnet_params['dist_model'] if 'dist_model' in hetnet_params.keys() else 0)\n",
        "        \n",
        "        hetnet_inst.mue_position, new_nbMUE = hetnet_inst.initialize_UE_position(nbPlayers=len(hetnet_inst.context_set), \n",
        "                                                                      distance=cell_range, dist_model=0)\n",
        "        \n",
        "        # randomly set shadowing variances of ue's, as an array of (nbUE-nbChannel)\n",
        "        shadow_vr_base = 2.0 if 'shadow_vr' not in hetnet_params.keys() else hetnet_params['shadow_vr']        \n",
        "        hetnet_inst.ue_shadow_variance = np.random.uniform(size=(nbPlayers, nbArms))*shadow_vr_base\n",
        "        hetnet_inst.mue_shadow_variance = np.random.uniform(size=len(context_set))*shadow_vr_base\n",
        "\n",
        "        fading_vr_base = 1.0 if 'fading_vr' not in hetnet_params.keys() else hetnet_params['fading_vr'] \n",
        "        hetnet_inst.ue_fading_variance =  np.random.uniform(size=(nbPlayers, nbArms))*fading_vr_base        \n",
        "        \n",
        "        # assume that different context has different probability of LoS path\n",
        "        hetnet_inst.set_discrete_context_prob(hetnet_params['context_prob'], hetnet_params['los_prob']) \n",
        "                                  \n",
        "        nb_MUE = len(hetnet_inst.prob_context)\n",
        "        hetnet_inst.mue_mean_vel, hetnet_inst.mue_mean_dir = hetnet_inst.initialize_UE_mobile_model(nb_MUE, scale_velocity=0.1)\n",
        "        \n",
        "        hetnet_inst.mue_vel = np.zeros(nb_MUE)\n",
        "        hetnet_inst.mue_dir = np.zeros(nb_MUE)\n",
        "        \n",
        "        hetnet_inst.vel_base = 1.0 if 'vel_base' not in hetnet_params.keys() else hetnet_params['vel_base']        \n",
        "        \n",
        "        return hetnet_inst\n",
        "    \n",
        "    def set_discrete_context_prob(self, context_prob, los_prob):\n",
        "        \"\"\"\n",
        "        assign arbitrary probabilities to contexts\n",
        "        \"\"\"\n",
        "        if set(context_prob.keys()) != self.context_set:\n",
        "            raise Exception(\"probability values do not match the set of context\")\n",
        "        \n",
        "        self.context_array = np.array(list(context_prob.keys()))\n",
        "        \n",
        "        # probability of different MUE/UE in neighbor cells transmitting\n",
        "        self.prob_context = np.array(list(context_prob.values()))\n",
        "        self.prob_context = self.prob_context / np.sum(self.prob_context) # normalize \n",
        "        \n",
        "        # probability of different MUE to the receiving AP\n",
        "        # this is to simulate the situation that transmissions from different MUE occupy the channels in the cell\n",
        "        self.prob_LoS = np.array(list(los_prob.values()))\n",
        "        self.prob_LoS = self.prob_LoS / np.sum(self.prob_LoS) # normalize          \n",
        "\n",
        "\n",
        "    def initialize_UE_position(self, nbPlayers, distance=200, dist_model=0):\n",
        "        \"\"\"\n",
        "        initialize the positions of IoT devices and UEs\n",
        "        \"\"\"\n",
        "        if dist_model == 1:# PPP distribution        \n",
        "            #TODO: the input number of nodes may not be equal to N according to the PPP distribution\n",
        "            # we need to update the player number self.nbPlayers\n",
        "            # do not call this branch in this version\n",
        "            N = scipy.stats.poisson( nbPlayers*1 ).rvs()            \n",
        "\n",
        "        else: # uniform distribution, TODO: add new distribution model here\n",
        "            N = nbPlayers\n",
        "            \n",
        "        x = scipy.stats.uniform.rvs(0, 1,((N,1)))*distance\n",
        "        y = scipy.stats.uniform.rvs(0, 1,((N,1)))*distance       \n",
        "\n",
        "        ue_position = np.hstack((x,y)).T\n",
        "        \n",
        "        return ue_position, N\n",
        "    \n",
        "    def initialize_UE_mobile_model(self, nbPlayers, scale_velocity=1):\n",
        "        ue_mean_vel = np.random.uniform(nbPlayers)*scale_velocity\n",
        "        ue_direction = np.random.uniform(nbPlayers)*np.pi*2\n",
        "        \n",
        "        return ue_mean_vel, ue_direction\n",
        "            \n",
        "    \"\"\"Draw samples\"\"\"\n",
        "    def draw_sample(self, t=None):        \n",
        "        \"\"\"\n",
        "        draw a new sample        \n",
        "        \"\"\"\n",
        "        context_id_array = np.arange(start=0, stop=len(self.context_array))             \n",
        "        id_context = np.random.choice(a=context_id_array, size=None, p=self.prob_context) # choose the ID of MUE\n",
        "        self.current_context = self.context_array[id_context] # get the context value \n",
        "        \n",
        "        if t == None:            \n",
        "            # update all MUEs' positions\n",
        "            self.mue_position, self.mue_vel, self.mue_dir = self.update_ue_position(self.mue_position, self.mue_vel, \n",
        "                                                                self.mue_dir, self.mobile_alpha, self.mue_mean_vel, self.mue_mean_dir)\n",
        "                        \n",
        "            current_arm_value = self.compute_device_rate(id_context)\n",
        "            \n",
        "            # normalization\n",
        "            self.current_arm_value = current_arm_value / np.max(current_arm_value)\n",
        "        else:\n",
        "            if self.flag_sample_prepared == False:\n",
        "                raise Exception(\"samples are not prepared\")\n",
        "            else:\n",
        "                # draw samples from the stored data\n",
        "                # print(t)\n",
        "                # print(self.current_context)\n",
        "                self.current_arm_value = self.arm_values[self.current_context][t]                \n",
        "        \n",
        "        return self.current_context, self.current_arm_value # we only return part of the real data\n",
        "         \n",
        "\n",
        "    def prepare_samples(self, horizon, flag_progress_bar=True):\n",
        "        \"\"\"\n",
        "        Prepare the samples along the time horizon in advance.\n",
        "        The sequential generation of UE positions would be the most significant bottleneck \n",
        "        for the simulation. \n",
        "        \"\"\"\n",
        "        if horizon <= 0:\n",
        "            raise Exception(\"Input horizon is not valid\")\n",
        "                    \n",
        "        self.horizon = horizon\n",
        "        \n",
        "        if flag_progress_bar:\n",
        "            progress_range = tqdm(range(horizon))\n",
        "        else:\n",
        "            progress_range = range(horizon)\n",
        "        \n",
        "        for time in progress_range:\n",
        "            # update position first\n",
        "            self.mue_position, self.mue_vel, self.mue_dir = self.update_ue_position(self.mue_position, self.mue_vel, \n",
        "                                                            self.mue_dir, self.mobile_alpha, self.mue_mean_vel, self.mue_mean_dir)\n",
        "            # the positions are the same w.r.t. each channel, but the shadowing/fading parameters are different\n",
        "            for context in self.context_set:\n",
        "                id_context = self.context_array.tolist().index(context) #np.where(self.context_array == context)\n",
        "                \n",
        "                rates = self.compute_device_rate(id_context)\n",
        "                \n",
        "                # normalization\n",
        "                current_max_rate = np.max(rates)\n",
        "                normalized_rate = rates / current_max_rate\n",
        "                # record the normalized rate matrix at \"time\"\n",
        "                self.arm_values[context].append(normalized_rate)\n",
        "                self.max_arm_value[context].append(current_max_rate) #added @ 2020.02.21\n",
        "                    \n",
        "        self.flag_sample_prepared = True\n",
        "        \n",
        "    \"\"\"\n",
        "    methods used in draw_sample()\n",
        "    \"\"\"\n",
        "    def update_ue_position(self, ue_position, ue_vel, ue_dir, mobil_alpha, ue_mean_vel, ue_mean_dir):         \n",
        "         # Gauss—Markov mobility model, Chapter 2.5. Gauss—Markov \"A survey of mobility models for ad hoc network research\", [Camp2002]         \n",
        "         # Calculate the new velocity and direction values using the Gauss-Markov formula:\n",
        "         # new_val = alpha*old_val + (1-alpha)*mean_val + sqrt(1-alpha^2)*rv\n",
        "         # where rv is a random number sampled from a normal (gaussian) distribution\n",
        "         # reference code (ns-3): https://www.nsnam.org/docs/doxygen/gauss-markov-mobility-model_8cc_source.html\n",
        "         one_minus_alpha = 1 - mobil_alpha\n",
        "         sqrt_alpha = np.sqrt(1 - mobil_alpha**2)\n",
        "         \n",
        "         rv = np.random.normal(size=len(ue_vel)) * self.vel_base # velocity\n",
        "         rd = np.random.normal(size=len(ue_vel)) # angle\n",
        "         \n",
        "         # random value, default parameters: mean = 0, and variance = 1\n",
        "         ue_vel = mobil_alpha * ue_vel + one_minus_alpha * ue_mean_vel + sqrt_alpha * rv\n",
        "         ue_dir = mobil_alpha * ue_dir + one_minus_alpha * ue_mean_dir + sqrt_alpha * rd\n",
        "         \n",
        "         cos_dir = np.cos(ue_dir)\n",
        "         sin_dir = np.sin(ue_dir)\n",
        "         \n",
        "         x = ue_position[0,:] + ue_vel * cos_dir\n",
        "         y = ue_position[1,:] + ue_vel * sin_dir\n",
        "         \n",
        "         ue_position = np.vstack((x,y))\n",
        "         \n",
        "         return ue_position, ue_vel, ue_dir\n",
        "         \n",
        "    # used for sampling channels gains\n",
        "    def update_pathloss_db(self, ue_pos, bs_pos, flag_LoS=False):    \n",
        "        #update the pathloss of the IoT devices and the macrocell UE\n",
        "        if self.flag_mmWave == True:                \n",
        "            if flag_LoS == True:\n",
        "                pl_db = self.path_loss_dB_mmWave(ue_pos, bs_pos, self.PLE_LoS)\n",
        "            else:\n",
        "                pl_db = self.path_loss_dB_mmWave(ue_pos, bs_pos, self.PLE_NLoS)\n",
        "            \n",
        "#            pl = 10 ** (pl_db / 10.)\n",
        "        else:\n",
        "            pl_db = self.path_loss_dB_cost231(ue_pos, bs_pos)\n",
        "#            pl = 10 ** (pl_db / 10.)\n",
        "            \n",
        "        return pl_db # path loss in dB\n",
        "            \n",
        "    # we may need to compute different ue/device-BS pairs\n",
        "    def path_loss_dB_mmWave(self, ue_position, bs_position, PLE):\n",
        "        \"\"\"\n",
        "        Based on IEEE TWC paper \"Directional Radio Propagation Path Loss Models for Millimeter-Wave \n",
        "        Wireless Networks in the 28-, 60-, and 73-GHz Bands\", Oct. 2016 [Sulyman2016]\n",
        "        Nr is the number of unique pointing beams combined, Nr = 3,4,5\n",
        "        \"\"\"\n",
        "        #PLE = 2 for LoS, 4 for NLoS, see self.PLE_LoS, self.PLE_NLoS        \n",
        "        c = 3e8 # light speed\n",
        "        \n",
        "        # to align the notations with the equations in the refernece [Sulyman2016]\n",
        "        A = self.wf_A \n",
        "        nr = self.nb_UPBC\n",
        "        fc = self.frequence # in Hz\n",
        "        \n",
        "        if ue_position.ndim == 1:\n",
        "            pass # single ue, don't have to do anything\n",
        "        else:            \n",
        "            bs_position = np.broadcast_to(bs_position, (ue_position.shape[::-1])).T\n",
        "        \n",
        "        dist = np.linalg.norm(ue_position-bs_position, axis=0) # along the rows          \n",
        "        \n",
        "#         fspl = 32.4 + 20 * np.log10(fc / 1e9) # fc in GHz, Eq (1a) of 2016 [Sulyman2016], equivalent equation\n",
        "        fspl = 20 * np.log10((4*np.pi*dist*fc) / c) # Eq (1a) of 2016 [Sulyman2016]\n",
        "        pl = fspl + 10 * PLE * np.log10(dist) * (1 - A*np.log2(nr)) # Eq (8) of 2016 [Sulyman2016]    \n",
        "    \n",
        "        return pl # in dB    \n",
        "    \n",
        "    def path_loss_dB_cost231(self, ue_position, bs_position):\n",
        "        \"\"\"\n",
        "        reference: A.2.2 COST 231 Extension to Hata Model, Channel Models A Tutorial, [Jain2007]\n",
        "        code reference: https://www.mathworks.com/matlabcentral/fileexchange/21795-hata-and-cost231-hata-models\n",
        "        \"\"\"\n",
        "        fc = self.frequence\n",
        "\n",
        "        dist =np.linalg.norm(ue_position-bs_position, axis=1)    \n",
        "\n",
        "        h_BS = 20 #  effective base station antenna height\n",
        "        h_UE = 1.5 # mobile station antenna height\n",
        "     \n",
        "        # COST231        \n",
        "        C = 3\n",
        "        \n",
        "        # equation: ahMS = (1.1 * log10(f) - 0.7) * hMS - (1.56 * log10(f) - 0.8);\n",
        "        ahMS = (1.1 * np.log10(fc/1e6) - 0.7)*h_UE - (1.56*np.log10(fc/1e6) - 0.8)\n",
        "        \n",
        "        # equation:  L50dB = 46.3 + 33.9 * log10(f) - 13.82 * log10(hBSef) - ahMS + (44.9 - 6.55 * log10(hBSef)) * log(d) + C;\n",
        "        # f is in MHz, dist is in km        \n",
        "        pl = 46.3 + 33.9 * np.log10(fc/1e6) + 13.82 * np.log10(h_BS) - ahMS + (44.9 - 6.55 * np.log10(h_BS)) * np.log10(dist/1000.) + C\n",
        "                \n",
        "        return pl # in dB\n",
        "        \n",
        "    def update_shadow(self, shadow_mean, shadow_var, ue_number):        \n",
        "        \"\"\"\n",
        "        log-normal shadowing\n",
        "        \"\"\"\n",
        "        # ue_number is used in case the shadowing parameters are the same\n",
        "        chi_shadow = np.random.normal(loc=shadow_mean, scale=shadow_var, size=ue_number) # log-normal shadowing in dB\n",
        "        \n",
        "        return chi_shadow # in dB\n",
        "        \n",
        "\n",
        "    def update_fast_fading(self, ue_number, rb_number, fading_variance, fading_type=0):\n",
        "        \"\"\"\n",
        "        Rayleigh fading\n",
        "        \"\"\"\n",
        "        if fading_type == 0:\n",
        "            \"\"\"\n",
        "            Rayleigh fading,     \n",
        "            \"\"\"\n",
        "            if rb_number > 1:\n",
        "                scale = np.broadcast_to(fading_variance, (ue_number, rb_number))\n",
        "                hf = 1/np.sqrt(2*scale) * (np.random.normal(scale = scale, size = (ue_number, rb_number)) \n",
        "                              + 1j* np.random.normal(scale = scale, size = (ue_number, rb_number)))\n",
        "            else:\n",
        "                scale = fading_variance\n",
        "                hf = 1/np.sqrt(2*scale) * (np.random.normal(scale=scale, size=ue_number) \n",
        "                              + 1j* np.random.normal(scale=scale, size=ue_number))\n",
        "            \n",
        "            h_fading = 20 * np.log10(np.abs(hf)) # in dB\n",
        "        else:\n",
        "            #implement other fast fading model here\n",
        "            raise NotImplementedError(\"fast fading types not supported\")\n",
        "        \n",
        "        return h_fading # in dB\n",
        "        \n",
        "\n",
        "    def update_MUE_channels(self, mue_position, mue_shadow_variance, flag_LoS=False):\n",
        "        \"\"\"\n",
        "        update_MUE_channels() and update_IoT_channels() are functions called by compute_device_rate()\n",
        "        \"\"\"\n",
        "        # update_MUE_channels() is supposed to update a single MUE's (according to the context id) channel information\n",
        "        # multiple MUE is also supported\n",
        "        #\n",
        "        pl = self.update_pathloss_db(mue_position, self.bs_position, flag_LoS)\n",
        "        sh = self.update_shadow(shadow_mean=0, shadow_var=mue_shadow_variance, ue_number=1)\n",
        "        ff = 0# compared with the path loss, we ignore fast fading here\n",
        "                \n",
        "        if mue_position.ndim == 1:\n",
        "            # to check if we compute for a single MUE or multiple ones\n",
        "            nb_mue = 1\n",
        "        else:\n",
        "            nb_mue = mue_position.shape[0]\n",
        "            \n",
        "        \n",
        "        channel_gains = np.array((nb_mue, self.nb_UPBC), dtype=complex)\n",
        "        \n",
        "        if nb_mue == 1:\n",
        "            channel_gains = self.update_channel_gain(pl, sh, ff, self.atenna_gain, flag_LoS)\n",
        "        else:            \n",
        "            for ii in range(nb_mue):\n",
        "                channel_gains[ii,:] = self.update_channel_gain(pl[ii], sh[ii], ff[ii], self.atenna_gain, flag_LoS)\n",
        "               \n",
        "        return channel_gains \n",
        "    \n",
        "    def update_IoT_channels(self, flag_LoS=False):\n",
        "        # we assume that the iot devices do not move\n",
        "        pl = self.update_pathloss_db(self.ue_position, self.bs_position, flag_LoS) # the same for each player\n",
        "        \n",
        "        channel_gains = np.zeros((self.nbPlayers, self.nbArms, self.nb_UPBC), dtype=complex)\n",
        "        for id_arm in range(self.nbArms):\n",
        "            # not the same for each channel/arm\n",
        "            sh = self.update_shadow(shadow_mean=0, shadow_var=self.ue_shadow_variance[:,id_arm], ue_number=self.nbPlayers) \n",
        "            ff = self.update_fast_fading(self.nbPlayers, 1, self.ue_fading_variance[:,id_arm]) # not the same for each channel/arm\n",
        "            \n",
        "            for ii in range(self.nbPlayers):            \n",
        "                channel_gains[ii, id_arm, :] = self.update_channel_gain(pl[ii], sh[ii], ff[ii], self.atenna_gain, flag_LoS) #pl + sh - ff\n",
        "        \n",
        "        return channel_gains    \n",
        "    \n",
        "    def update_channel_gain(self, pl, sh, ff, atenna_gain, flag_LoS): \n",
        "        \"\"\"\n",
        "        consider a uniform linear array (ULA) with nb_UPBC antennas, \n",
        "        the steering vector of the array towards direction θ is denoted as theta\n",
        "        \"\"\"        \n",
        "        path_loss = 10 ** (pl / 10.)\n",
        "\n",
        "        vb = np.zeros(self.nb_UPBC, dtype=complex)        \n",
        "        # v is the array vector                    \n",
        "        if (flag_LoS == True):\n",
        "            Np = 1\n",
        "            vb[0] = 1. / np.sqrt(path_loss)\n",
        "        else:\n",
        "            # \n",
        "            Np = self.nb_UPBC\n",
        "            vb = (np.random.normal(size=Np) + 1j * np.random.normal(size=Np)) / np.sqrt(path_loss)\n",
        "\n",
        "        # randomly generated\n",
        "        theta = np.random.uniform(low=0, high=np.pi, size=Np)                \n",
        "        rho = 10 ** ((atenna_gain + sh + ff ) / 10.)\n",
        "        \n",
        "        # initialize the channel as a complex variable.\n",
        "        h_ch = np.zeros(self.nb_UPBC, dtype=complex)\n",
        "        \n",
        "        for path in np.arange(Np):\n",
        "            exponent = 1j * np.pi * np.cos(theta[path]) * np.arange(self.nb_UPBC)\n",
        "            \n",
        "            bf_vec = 1. / np.sqrt(self.nb_UPBC) * np.exp(exponent)\n",
        "            h_ch = h_ch + bf_vec[path] / rho * bf_vec.T # scalar multiplication into a vector\n",
        "        \n",
        "        h_ch = h_ch * np.sqrt(self.nb_UPBC)\n",
        "        \n",
        "        return h_ch\n",
        "    \n",
        "    def compute_device_rate(self, id_context):\n",
        "        id_LoS = np.random.choice([0,1], p=[self.prob_LoS[id_context], 1-self.prob_LoS[id_context]])\n",
        "         \n",
        "        mue_channel_gain = self.update_MUE_channels(self.mue_position[:, id_context], self.mue_shadow_variance[id_context],\n",
        "                                                     flag_LoS=(id_LoS == 0)) # part of the context, interference\n",
        "         \n",
        "        iot_channel_gains = self.update_IoT_channels(flag_LoS=False)\n",
        "         \n",
        "        # get the channel capacity w.r.t. each IoT devices over each arm/channel\n",
        "        interference_power = self.mue_power[id_context] * abs(np.dot(mue_channel_gain.conj(), self.F[:, self.mue_cb_idx])) ** 2\n",
        "        \n",
        "        iot_received_power = np.zeros((self.nbPlayers, self.nbArms))# 2D matrix, columns correspond to each channel\n",
        "        for player_id in range(self.nbPlayers):\n",
        "            for ch_id in range(self.nbArms):\n",
        "                iot_received_power[player_id][ch_id] = self.ue_power * abs(np.dot(iot_channel_gains[player_id, ch_id,:].conj(), \n",
        "                              self.F[:, self.iot_cb_idx])) ** 2   \n",
        "\n",
        "        mue_ipn = interference_power + self.noise #interference plus noise, scalar\n",
        "\n",
        "        # should be a (nbPlayer, nbArm) matrix\n",
        "        rates = np.log2(1 + np.divide(iot_received_power, mue_ipn))\n",
        "         \n",
        "        # update the rate value for all players over all arms         \n",
        "        return rates    \n",
        "\n",
        "    \"\"\"utility functions\"\"\"   \n",
        "    # helper_plot_ue_posiiton() is used only for debugging\n",
        "    def helper_plot_ue_posiiton(self):\n",
        "        \"\"\"\n",
        "        For debugging purpose\n",
        "        \"\"\"\n",
        "        plt.figure(figsize=(4,3))\n",
        "        plt.scatter(self.ue_position[0,:], self.ue_position[1,:], edgecolor='b', facecolor='none', alpha=0.5 )     \n",
        "        plt.scatter(self.mue_position[0,:], self.mue_position[1,:], edgecolor='r', facecolor='none', alpha=0.5 ) \n",
        "     \n",
        "    def get_discrete_context_prob(self):        \n",
        "        return self.prob_context\n",
        "            \n",
        "    def get_param(self, context):\n",
        "        # it is difficult to get the rate statisitics of the UEs over each channel\n",
        "        raise NotImplementedError(\"get_param() is not campatible with class HomeBrewedHetNetEnv.\") \n",
        "        \n",
        "    def get_current_param(self, t=None):\n",
        "        \"\"\" \n",
        "        Get the current sampling parameters of arms in the given context.\n",
        "        \"\"\"\n",
        "        raise NotImplementedError(\"This method get_current_param() is not campatible with class HomeBrewedHetNetEnv.\") \n",
        "        \n",
        "    def save_environment(self, file_name=None):\n",
        "        #TODO: not fully tested yet, not used\n",
        "        if self.flag_sample_prepared == False:\n",
        "            print(\"No data is prepared\")\n",
        "        else:       \n",
        "            # we cannot select the path yet, put the file to the default directory \"\\results\" of the current path            \n",
        "            file_path = prepare_file_name(\"{}-{}\".format(file_name if file_name is not None else \"\", \"env\"), \n",
        "                                          alg_name = None, ext_format = \"mat\")\n",
        "                        \n",
        "            scipy.io.savemat(file_path, self.arm_values)\n",
        "        \n",
        "    def load_environment(self, file_path, horizon=None):\n",
        "        #TODO: not fully tested yet, not used\n",
        "        try:            \n",
        "            self.arm_values = scipy.io.loadmat(file_path)\n",
        "        except:\n",
        "            print(\"No data is loaded\")\n",
        "            \n",
        "        self.flag_sample_prepared = True"
      ],
      "metadata": {
        "id": "zZEWQsHAz5qR"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "from datetime import datetime\n",
        "\n",
        "def simulation_execution(game_config):        \n",
        "    \"\"\"\n",
        "    simulation_execution() is the main body of the MP-MAP algorithm simulations\n",
        "    \"\"\"    \n",
        "    print(\"MAB game with configuration '{}' starts to play...\".format(game_config.__repr__()))\n",
        "\n",
        "    game_horizon = game_config[\"game_horizon\"]\n",
        "    alg_engine = AlgEvaluator(game_config[\"env_config\"])   \n",
        "    alg_types = game_config[\"alg_types\"]\n",
        "    #add algorithms\n",
        "    for alg_id in range(len(game_config[\"alg_types\"])):\n",
        "        alg_engine.add_algorithm(algo_type=game_config[\"alg_types\"][alg_id], \n",
        "                                 custome_params=game_config[\"alg_configs\"][alg_id])\n",
        "    \n",
        "    print(\"MAB game prepares the environment for arm type '{}' of {} rounds\".format(game_config[\"env_config\"]['env_type'], game_horizon))\n",
        "    alg_engine.prepare_arm_samples()\n",
        "    \n",
        "    # simulation 1: reward plotting to compare the efficiency of the algorithms\n",
        "    if \"enable_efficiency_simulation\" in game_config and game_config[\"enable_efficiency_simulation\"]:\n",
        "        start_time_oneshot = time.time()\n",
        "                \n",
        "        #######################################################################\n",
        "        #\n",
        "        if game_config.flag_parallel != True:\n",
        "#            print(\"starting single-process simulation...\")\n",
        "            alg_engine.play_game(flag_progress_bar=game_config[\"flag_progress_bar\"])    \n",
        "        else:\n",
        "#            print(\"starting parallel simulation...\")\n",
        "            alg_engine.play_game_parallel(flag_progress_bar=game_config[\"flag_progress_bar\"])\n",
        "        #\n",
        "        #######################################################################\n",
        "            \n",
        "        alg_engine.plot_rewards(save_fig = game_config[\"flag_save_figure\"], save_data = game_config[\"save_data\"])        \n",
        "        \n",
        "        # printing\n",
        "        running_time = time.time() - start_time_oneshot           \n",
        "        print(\"Single-shot simulation completes in {} for {} iterations.\".format( \\\n",
        "                datetime.timedelta(seconds=running_time), game_horizon))\n",
        "    \n",
        "    # simulation 2/3/4: plotting regret or total rewards over horizon\n",
        "    if (\"enable_regret_simulation\" in game_config and game_config[\"enable_regret_simulation\"]) or \\\n",
        "       (\"enable_reward_simulation\" in game_config and game_config[\"enable_reward_simulation\"]) or \\\n",
        "       (\"enable_switching_simulation\" in game_config and game_config[\"enable_switching_simulation\"]):    \n",
        "        start = game_config[\"T_start\"]\n",
        "        nb_point = game_config[\"T_step\"]\n",
        "        \n",
        "        horizon_list = np.exp(np.linspace(np.log(start), np.log(game_horizon), nb_point))\n",
        "        simu_rounds = game_config[\"T_simu_rounds\"]\n",
        "        \n",
        "        start_time_repeated = time.time()\n",
        "        \n",
        "        #######################################################################\n",
        "        #\n",
        "        if game_config[\"flag_parallel\"] != True:\n",
        "#            print(\"starting single-process simulation...\")\n",
        "            simulation_results = alg_engine.play_repeated_game(horizon_list, simulation_rounds=simu_rounds, \n",
        "                                                               flag_progress_bar=game_config[\"flag_progress_bar\"])                        \n",
        "        else:\n",
        "#            print(\"starting parallel simulation...\")\n",
        "            simulation_results = alg_engine.play_repeated_game_parallel(horizon_list, simulation_rounds=simu_rounds,\n",
        "                                                                        flag_progress_bar=game_config[\"flag_progress_bar\"])\n",
        "        #\n",
        "        #######################################################################\n",
        "          \n",
        "        # printing\n",
        "        running_time = time.time() - start_time_repeated    \n",
        "        # print(\"Repeated simulation completes in {} with maximum horizon {} in {} rounds of plays...\".format(\\\n",
        "              # datetime.timedelta(seconds=running_time), game_horizon, simu_rounds))\n",
        "            \n",
        "        # virtualization for simulation 2\n",
        "        if \"enable_regret_simulation\" in game_config and game_config[\"enable_regret_simulation\"]:\n",
        "            # locate the reference algorithm\n",
        "            optimal_alg_id = 0\n",
        "            \n",
        "            len_horizon = simulation_results['horizon'].shape[1]\n",
        "            time_series = np.empty((0, len_horizon))\n",
        "            alg_indicator_series = []\n",
        "    \n",
        "            avg_regret_series = np.empty((0, len_horizon))\n",
        "            for alg_id in range(len(simulation_results['algorithm_name'])):\n",
        "                if alg_id != optimal_alg_id:\n",
        "                    # the returned value simulation_results['reward_series'] is organized as an array:\n",
        "                    # (len(algorithm_ids), simulation_rounds*len(horizon_list))\n",
        "                    horizon_series = simulation_results['horizon'][alg_id,:]\n",
        "                    avg_regret = (simulation_results['reward_series'][optimal_alg_id,:] - \n",
        "                              simulation_results['reward_series'][alg_id,:]) / horizon_series\n",
        "                \n",
        "                    avg_regret_series = np.append(avg_regret_series, avg_regret) # flatten\n",
        "                    time_series = np.append(time_series, horizon_series)\n",
        "                    \n",
        "                    alg_indicator_series.extend([simulation_results['algorithm_name'][alg_id]] * len(horizon_series))\n",
        "                    \n",
        "            prepared_results = {}                \n",
        "            prepared_results['Average regret'] = avg_regret_series            \n",
        "            prepared_results['Total number of plays'] = time_series        \n",
        "            prepared_results['Algorithms'] = alg_indicator_series\n",
        "                \n",
        "            simu_data_frame = pd.DataFrame(prepared_results)\n",
        "            \n",
        "            # plot and save the figure    \n",
        "            file_name = \"monte_carlo_regret\" if game_config[\"flag_save_figure\"]==True else None        \n",
        "            sns_figure_unused, repeated_play_data_name = plot_data_frame(simu_data_frame, \n",
        "                            xlabel=\"Total number of plays\", ylabel=\"Average regret\", huelabel='Algorithms', \n",
        "                            save_file_name=file_name, save_data_name=game_config.repeated_play_data_name)\n",
        "            \n",
        "            # post processing, add the theoretical bound to the figure\n",
        "            flag_bound = False\n",
        "            if hasattr(game_config, 'flag_regret_bound'):\n",
        "                flag_bound = game_config[\"flag_regret_bound\"]\n",
        "            else:\n",
        "                flag_bound = False\n",
        "                \n",
        "            plot_repeated_simu_results(start=start, horzion=game_horizon, nbPoints=nb_point, flag_bound=flag_bound,\n",
        "                                       data_file_name=repeated_play_data_name)            \n",
        "        \n",
        "        # virtualization for simulation 3\n",
        "        if \"enable_reward_simulation\" in game_config and game_config[\"enable_reward_simulation\"]:          \n",
        "            len_horizon = simulation_results['horizon'].shape[1]\n",
        "            time_series = np.empty((0, len_horizon))\n",
        "            alg_indicator_series = []\n",
        "            \n",
        "            reward_series = np.array([])\n",
        "            for alg_id in range(len(simulation_results['algorithm_name'])):\n",
        "                horizon_series = simulation_results['horizon'][alg_id,:]\n",
        "                avg_rewards = simulation_results['reward_series'][alg_id, :] / horizon_series\n",
        "                \n",
        "                reward_series = np.append(reward_series, avg_rewards) # flatten\n",
        "                time_series = np.append(time_series, horizon_series)\n",
        "                alg_indicator_series.extend([simulation_results['algorithm_name'][alg_id]] * len(horizon_series))\n",
        "                \n",
        "            prepared_results = {}                \n",
        "            prepared_results['Average sum of rewards'] = reward_series            \n",
        "            prepared_results['Total number of plays'] = time_series        \n",
        "            prepared_results['Algorithms'] = alg_indicator_series\n",
        "            \n",
        "            simu_data_frame = pd.DataFrame(prepared_results)\n",
        "            \n",
        "            \n",
        "            #plot and save the figure    \n",
        "            file_name = \"monte_carlo_rewards\" if game_config[\"flag_save_figure\"]==True else None        \n",
        "            plot_data_frame(simu_data_frame, \n",
        "                            xlabel=\"Total number of plays\", ylabel=\"Average sum of rewards\", huelabel='Algorithms', \n",
        "                            flag_semilogx = False,\n",
        "                            save_file_name=file_name, save_data_name=game_config[\"repeated_play_data_name\"])\n",
        "            \n",
        "        # virtualization for simulation 4    \n",
        "        if \"enable_switching_simulation\" in game_config and game_config[\"enable_switching_simulation\"]:\n",
        "            len_horizon = simulation_results['horizon'].shape[1]\n",
        "            time_series = np.empty((0, len_horizon))\n",
        "            alg_indicator_series = []\n",
        "            \n",
        "            switching_series = np.array([])\n",
        "            collision_series = np.array([])\n",
        "                       \n",
        "            for alg_id in range(len(simulation_results['algorithm_name'])):\n",
        "                horizon_series = simulation_results['horizon'][alg_id,:]\n",
        "                switching = simulation_results['switching_count_series'][alg_id, :]\n",
        "                collisions = simulation_results['collision_series'][alg_id, :]\n",
        "                \n",
        "                switching_series = np.append(switching_series, switching) # flatten\n",
        "                collision_series = np.append(collision_series, collisions) # flatten\n",
        "                \n",
        "                time_series = np.append(time_series, horizon_series)\n",
        "                alg_indicator_series.extend([simulation_results['algorithm_name'][alg_id]] * len(horizon_series))\n",
        "                \n",
        "            prepared_results = {}                \n",
        "            prepared_results['Accumulated switching counts'] = switching_series\n",
        "            prepared_results['Accumulated collision counts'] = collision_series\n",
        "            prepared_results['Total number of plays'] = time_series        \n",
        "            prepared_results['Algorithms'] = alg_indicator_series\n",
        "            \n",
        "            assert len(switching_series) == len(collision_series), \"switching array must be of the same length: {}, {}\".format(\n",
        "                    len(switching_series), len(collision_series))\n",
        "            \n",
        "            simu_data_frame = pd.DataFrame(prepared_results)\n",
        "            \n",
        "            #plot and save the figure: 1\n",
        "            file_name = \"monte_carlo_switching\" if game_config[\"flag_save_figure\"]==True else None        \n",
        "            plot_data_frame(simu_data_frame, \n",
        "                            xlabel=\"Total number of plays\", ylabel=\"Accumulated switching counts\", huelabel='Algorithms', \n",
        "                            flag_semilogx = False,\n",
        "                            save_file_name=file_name, save_data_name=game_config[\"repeated_play_data_name\"])\n",
        "            \n",
        "            #plot and save the figure: 2\n",
        "            file_name = \"monte_carlo_collision\" if game_config[\"flag_save_figure\"]==True else None        \n",
        "            plot_data_frame(simu_data_frame, \n",
        "                            xlabel=\"Total number of plays\", ylabel=\"Accumulated collision counts\", huelabel='Algorithms', \n",
        "                            flag_semilogx = False,\n",
        "                            save_file_name=file_name, save_data_name=game_config[\"repeated_play_data_name\"])            \n",
        "\n"
      ],
      "metadata": {
        "id": "kAwX8HPv-n_T"
      },
      "execution_count": 101,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "\n",
        "import logging\n",
        "import os\n",
        "import functools\n",
        "\n",
        "from datetime import datetime\n",
        "\n",
        "\n",
        "def __singleton(class_):\n",
        "    \"\"\"\n",
        "    Make <class_> a singleton class with only one single instance.\n",
        "    Note that it cannot prevent instantiation in multiple processes\n",
        "    \"\"\"    \n",
        "    @functools.wraps(class_)\n",
        "    def wrapper_singleton(*args, **kwargs):\n",
        "        if wrapper_singleton.instance is None:\n",
        "#            print(\"wrapper_singleton.instance\")\n",
        "            wrapper_singleton.instance = class_(*args, **kwargs)\n",
        "            \n",
        "        return wrapper_singleton.instance\n",
        "    \n",
        "    wrapper_singleton.instance = None\n",
        "    \n",
        "    return wrapper_singleton\n",
        "\n",
        "@__singleton\n",
        "class info_logger(object):\n",
        "    def __init__(self):                       \n",
        "        log_file_name = 'log'\n",
        "        # the logging module may be used by different process in the parallel mode\n",
        "        # for each process we create a single log file\n",
        "        process_id = os.getpid()\n",
        "        \n",
        "        now = datetime.now()\n",
        "        current_date = now.strftime(\"(%Y-%m-%d-%H-%M-%S)\")\n",
        "        cwd = os.getcwd() # current directory    \n",
        "        logFilePath = \"{}\\{}\\{}-{}-{}.log\".format(cwd, \"results\", log_file_name, process_id, current_date)\n",
        "                 \n",
        "        # get the instance of logger\n",
        "        self.logger = logging.getLogger(log_file_name)        \n",
        "        self.logger.setLevel(logging.DEBUG)\n",
        "\n",
        "        #define the output format        \n",
        "        logging_format = logging.Formatter(\"[%(threadName)s, %(levelname)s] %(message)s\")\n",
        "#        logging_format = logging.Formatter('%(name)s  %(asctime)s  %(levelname)-8s:%(message)s')\n",
        " \n",
        "        # file handler        \n",
        "        file_handler = logging.FileHandler(logFilePath, mode='w')\n",
        "        file_handler.setFormatter(logging_format)\n",
        "        file_handler.setLevel(logging.DEBUG)\n",
        " \n",
        "        self.logger.addHandler(file_handler)\n",
        "        \n",
        "        print(\"logger created @ {}\".format(logFilePath))\n",
        "        self.log_info(\"logger created\")\n",
        "\n",
        "    # for different levels of messages, we can also call the logger member directly\n",
        "    def log_info(self, msg):\n",
        "        self.logger.info(msg)\n",
        " \n",
        "    def log_debug(self, msg):\n",
        "        self.logger.debug(msg)\n",
        "\n",
        "    def log_error(self, msg):\n",
        "        self.logger.error(msg)"
      ],
      "metadata": {
        "id": "mHPyiN7lhyBn"
      },
      "execution_count": 102,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import time\n",
        "import multiprocessing as mp\n",
        "from tqdm import tqdm\n",
        "\"\"\"\n",
        "Parallel processing is suggested to be turned on for repeated simulations (see simu_config.py)\n",
        "It is approximately 2X to 4X faster in terms of the total time than the single-process simulation\n",
        "\n",
        "\"\"\"\n",
        "\n",
        "game_config = { \"game_horizon\" : 10000,\n",
        "                \"env_config\" : {'horizon': 10000,\n",
        "                              'arm number': 12,\n",
        "                              'player number': 10,\n",
        "                              'context set': {\"context 1\", \"context 2\", \"context 3\"},#\n",
        "                              'env_type': 'HetNet simulator', # change the underlying distribution here\n",
        "                              'enabel mmWave': True,\n",
        "                              'cell range': 250,\n",
        "                              'context_prob': {'context 1': 2, 'context 2': 1, 'context 3': 1},\n",
        "                              'los_prob':  {'context 1': 1.5, 'context 2': 2, 'context 3': 1}\n",
        "                              },\n",
        "\n",
        "                # Disable simulation for reward evolution in a single shot\n",
        "                \"enable_efficiency_simulation\" : False,\n",
        "                \"enable_regret_simulation\" : False,\n",
        "                \"enable_reward_simulation\" : True,\n",
        "                \"enable_switching_simulation\" : True,\n",
        "\n",
        "                \"alg_types\" : ['ESE'],\n",
        "                \"alg_configs\" : [None],\n",
        "                                            \n",
        "                # Experiment parameters\n",
        "                \"flag_save_figure\" : True,\n",
        "                \"save_data\" : False,\n",
        "\n",
        "                # Experiment parameters\n",
        "                \"T_start\" : 400,\n",
        "                \"T_step\" : 120,\n",
        "                \"T_simu_rounds\" : 2,\n",
        "\n",
        "                \"repeated_play_data_name\" : 'reward_data_4_alg_HetNet',\n",
        "\n",
        "                # Enable parallel processing\n",
        "                \"flag_parallel\" : True,\n",
        "                \"flag_progress_bar\" : True,\n",
        "              }\n",
        "# print(game_config)\n",
        "# beginning of the game\n",
        "start_time = time.time()# record the starting time of the simulation, start simulations\n",
        "\n",
        "simulation_execution(game_config)\n",
        "    \n",
        "#end of the game\n",
        "running_time = time.time() - start_time    \n",
        "# print(\"Simulation completes in {}.\".format(datetime.timedelta(seconds=running_time)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "z5CoMwtvIgMA",
        "outputId": "b2804db7-eaaa-4ccd-f326-94bdb35af93d"
      },
      "execution_count": 103,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "INFO:log:logger created\n",
            "INFO:log:ESE random hopping phase length 240.0\n",
            "INFO:log:ESE sequential hopping phase length Ts 80000.0\n",
            "INFO:log:ESE signaling length Tb 9.0\n",
            "INFO:log:ESE play epoch length 961082.0\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "MAB game with configuration '{'game_horizon': 10000, 'env_config': {'horizon': 10000, 'arm number': 12, 'player number': 10, 'context set': {'context 3', 'context 1', 'context 2'}, 'env_type': 'HetNet simulator', 'enabel mmWave': True, 'cell range': 250, 'context_prob': {'context 1': 2, 'context 2': 1, 'context 3': 1}, 'los_prob': {'context 1': 1.5, 'context 2': 2, 'context 3': 1}}, 'enable_efficiency_simulation': False, 'enable_regret_simulation': False, 'enable_reward_simulation': True, 'enable_switching_simulation': True, 'alg_types': ['ESE'], 'alg_configs': [None], 'flag_save_figure': True, 'save_data': False, 'T_start': 400, 'T_step': 120, 'T_simu_rounds': 2, 'repeated_play_data_name': 'reward_data_4_alg_HetNet', 'flag_parallel': True, 'flag_progress_bar': True}' starts to play...\n",
            "logger created @ /content\\results\\log-72-(2022-11-21-06-12-37).log\n",
            "MAB game prepares the environment for arm type 'HetNet simulator' of 10000 rounds\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "100%|██████████| 10000/10000 [06:40<00:00, 24.95it/s]\n",
            "100%|██████████| 2/2 [01:51<00:00, 55.96s/it]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 512.25x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 512.25x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 512.25x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "xko4eB4Wgw2P"
      },
      "execution_count": 103,
      "outputs": []
    }
  ]
}